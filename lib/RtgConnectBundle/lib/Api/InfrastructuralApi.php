<?php
/**
 * InfrastructuralApi
 * PHP version 7.4
 *
 * @category Class
 * @package  RtgConnector\RtgConnectBundle
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * RTG-Portal
 *
 * The RTG-Portal API is an interface for selected RTG-Shop customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: fabian.kaufmann@picard.de
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RtgConnector\RtgConnectBundle\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use RtgConnector\RtgConnectBundle\ApiException;
use RtgConnector\RtgConnectBundle\Configuration;
use RtgConnector\RtgConnectBundle\HeaderSelector;
use RtgConnector\RtgConnectBundle\ObjectSerializer;

/**
 * InfrastructuralApi Class Doc Comment
 *
 * @category Class
 * @package  RtgConnector\RtgConnectBundle
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InfrastructuralApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'checkConnection' => [
            'application/json',
        ],
        'getCarriers' => [
            'application/json',
        ],
        'getLanguages' => [
            'application/json',
        ],
        'getOrderStatuscodes' => [
            'application/json',
        ],
        'getProductCategories' => [
            'application/json',
        ],
        'getProductManufacturers' => [
            'application/json',
        ],
        'updateRequestStatus' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation checkConnection
     *
     * checkConnection
     *
     * @param  string $stockListToken Stocklist identifier, add in RTG-Portal [Stocklist » add](https://rtg-portal.picard.de/stocklists/create) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkConnection'] to see the possible values for this operation
     *
     * @throws \RtgConnector\RtgConnectBundle\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RtgConnector\RtgConnectBundle\Model\TestConnectionResponse|\RtgConnector\RtgConnectBundle\Model\DataTokenInvalidErrorResponse|\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse|\RtgConnector\RtgConnectBundle\Model\ShoptokenPermissionErrorResponse
     */
    public function checkConnection($stockListToken, string $contentType = self::contentTypes['checkConnection'][0])
    {
        list($response) = $this->checkConnectionWithHttpInfo($stockListToken, $contentType);
        return $response;
    }

    /**
     * Operation checkConnectionWithHttpInfo
     *
     * checkConnection
     *
     * @param  string $stockListToken Stocklist identifier, add in RTG-Portal [Stocklist » add](https://rtg-portal.picard.de/stocklists/create) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkConnection'] to see the possible values for this operation
     *
     * @throws \RtgConnector\RtgConnectBundle\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RtgConnector\RtgConnectBundle\Model\TestConnectionResponse|\RtgConnector\RtgConnectBundle\Model\DataTokenInvalidErrorResponse|\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse|\RtgConnector\RtgConnectBundle\Model\ShoptokenPermissionErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkConnectionWithHttpInfo($stockListToken, string $contentType = self::contentTypes['checkConnection'][0])
    {
        $request = $this->checkConnectionRequest($stockListToken, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RtgConnector\RtgConnectBundle\Model\TestConnectionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RtgConnector\RtgConnectBundle\Model\TestConnectionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RtgConnector\RtgConnectBundle\Model\TestConnectionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\RtgConnector\RtgConnectBundle\Model\DataTokenInvalidErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RtgConnector\RtgConnectBundle\Model\DataTokenInvalidErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RtgConnector\RtgConnectBundle\Model\DataTokenInvalidErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\RtgConnector\RtgConnectBundle\Model\ShoptokenPermissionErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RtgConnector\RtgConnectBundle\Model\ShoptokenPermissionErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RtgConnector\RtgConnectBundle\Model\ShoptokenPermissionErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RtgConnector\RtgConnectBundle\Model\TestConnectionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RtgConnector\RtgConnectBundle\Model\TestConnectionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RtgConnector\RtgConnectBundle\Model\DataTokenInvalidErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RtgConnector\RtgConnectBundle\Model\ShoptokenPermissionErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkConnectionAsync
     *
     * checkConnection
     *
     * @param  string $stockListToken Stocklist identifier, add in RTG-Portal [Stocklist » add](https://rtg-portal.picard.de/stocklists/create) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkConnectionAsync($stockListToken, string $contentType = self::contentTypes['checkConnection'][0])
    {
        return $this->checkConnectionAsyncWithHttpInfo($stockListToken, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkConnectionAsyncWithHttpInfo
     *
     * checkConnection
     *
     * @param  string $stockListToken Stocklist identifier, add in RTG-Portal [Stocklist » add](https://rtg-portal.picard.de/stocklists/create) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkConnectionAsyncWithHttpInfo($stockListToken, string $contentType = self::contentTypes['checkConnection'][0])
    {
        $returnType = '\RtgConnector\RtgConnectBundle\Model\TestConnectionResponse';
        $request = $this->checkConnectionRequest($stockListToken, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkConnection'
     *
     * @param  string $stockListToken Stocklist identifier, add in RTG-Portal [Stocklist » add](https://rtg-portal.picard.de/stocklists/create) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function checkConnectionRequest($stockListToken, string $contentType = self::contentTypes['checkConnection'][0])
    {

        // verify the required parameter 'stockListToken' is set
        if ($stockListToken === null || (is_array($stockListToken) && count($stockListToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stockListToken when calling checkConnection'
            );
        }


        $resourcePath = '/api/shop/v2/testconnection/{stockListToken}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($stockListToken !== null) {
            $resourcePath = str_replace(
                '{' . 'stockListToken' . '}',
                ObjectSerializer::toPathValue($stockListToken),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCarriers
     *
     * getCarriers
     *
     * @param  \RtgConnector\RtgConnectBundle\Model\DefaultFilterRequestBody $defaultFilterRequestBody Default filter requestbody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCarriers'] to see the possible values for this operation
     *
     * @throws \RtgConnector\RtgConnectBundle\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RtgConnector\RtgConnectBundle\Model\SuccessResponse|\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse
     */
    public function getCarriers($defaultFilterRequestBody = null, string $contentType = self::contentTypes['getCarriers'][0])
    {
        list($response) = $this->getCarriersWithHttpInfo($defaultFilterRequestBody, $contentType);
        return $response;
    }

    /**
     * Operation getCarriersWithHttpInfo
     *
     * getCarriers
     *
     * @param  \RtgConnector\RtgConnectBundle\Model\DefaultFilterRequestBody $defaultFilterRequestBody Default filter requestbody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCarriers'] to see the possible values for this operation
     *
     * @throws \RtgConnector\RtgConnectBundle\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RtgConnector\RtgConnectBundle\Model\SuccessResponse|\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCarriersWithHttpInfo($defaultFilterRequestBody = null, string $contentType = self::contentTypes['getCarriers'][0])
    {
        $request = $this->getCarriersRequest($defaultFilterRequestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RtgConnector\RtgConnectBundle\Model\SuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RtgConnector\RtgConnectBundle\Model\SuccessResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RtgConnector\RtgConnectBundle\Model\SuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RtgConnector\RtgConnectBundle\Model\SuccessResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RtgConnector\RtgConnectBundle\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCarriersAsync
     *
     * getCarriers
     *
     * @param  \RtgConnector\RtgConnectBundle\Model\DefaultFilterRequestBody $defaultFilterRequestBody Default filter requestbody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCarriers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCarriersAsync($defaultFilterRequestBody = null, string $contentType = self::contentTypes['getCarriers'][0])
    {
        return $this->getCarriersAsyncWithHttpInfo($defaultFilterRequestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCarriersAsyncWithHttpInfo
     *
     * getCarriers
     *
     * @param  \RtgConnector\RtgConnectBundle\Model\DefaultFilterRequestBody $defaultFilterRequestBody Default filter requestbody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCarriers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCarriersAsyncWithHttpInfo($defaultFilterRequestBody = null, string $contentType = self::contentTypes['getCarriers'][0])
    {
        $returnType = '\RtgConnector\RtgConnectBundle\Model\SuccessResponse';
        $request = $this->getCarriersRequest($defaultFilterRequestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCarriers'
     *
     * @param  \RtgConnector\RtgConnectBundle\Model\DefaultFilterRequestBody $defaultFilterRequestBody Default filter requestbody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCarriers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCarriersRequest($defaultFilterRequestBody = null, string $contentType = self::contentTypes['getCarriers'][0])
    {



        $resourcePath = '/api/shop/v2/carriers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($defaultFilterRequestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($defaultFilterRequestBody));
            } else {
                $httpBody = $defaultFilterRequestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLanguages
     *
     * getLanguages
     *
     * @param  \RtgConnector\RtgConnectBundle\Model\DefaultFilterRequestBody $defaultFilterRequestBody Default filter requestbody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLanguages'] to see the possible values for this operation
     *
     * @throws \RtgConnector\RtgConnectBundle\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RtgConnector\RtgConnectBundle\Model\SuccessResponse|\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse
     */
    public function getLanguages($defaultFilterRequestBody = null, string $contentType = self::contentTypes['getLanguages'][0])
    {
        list($response) = $this->getLanguagesWithHttpInfo($defaultFilterRequestBody, $contentType);
        return $response;
    }

    /**
     * Operation getLanguagesWithHttpInfo
     *
     * getLanguages
     *
     * @param  \RtgConnector\RtgConnectBundle\Model\DefaultFilterRequestBody $defaultFilterRequestBody Default filter requestbody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLanguages'] to see the possible values for this operation
     *
     * @throws \RtgConnector\RtgConnectBundle\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RtgConnector\RtgConnectBundle\Model\SuccessResponse|\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLanguagesWithHttpInfo($defaultFilterRequestBody = null, string $contentType = self::contentTypes['getLanguages'][0])
    {
        $request = $this->getLanguagesRequest($defaultFilterRequestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RtgConnector\RtgConnectBundle\Model\SuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RtgConnector\RtgConnectBundle\Model\SuccessResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RtgConnector\RtgConnectBundle\Model\SuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RtgConnector\RtgConnectBundle\Model\SuccessResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RtgConnector\RtgConnectBundle\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLanguagesAsync
     *
     * getLanguages
     *
     * @param  \RtgConnector\RtgConnectBundle\Model\DefaultFilterRequestBody $defaultFilterRequestBody Default filter requestbody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLanguages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLanguagesAsync($defaultFilterRequestBody = null, string $contentType = self::contentTypes['getLanguages'][0])
    {
        return $this->getLanguagesAsyncWithHttpInfo($defaultFilterRequestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLanguagesAsyncWithHttpInfo
     *
     * getLanguages
     *
     * @param  \RtgConnector\RtgConnectBundle\Model\DefaultFilterRequestBody $defaultFilterRequestBody Default filter requestbody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLanguages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLanguagesAsyncWithHttpInfo($defaultFilterRequestBody = null, string $contentType = self::contentTypes['getLanguages'][0])
    {
        $returnType = '\RtgConnector\RtgConnectBundle\Model\SuccessResponse';
        $request = $this->getLanguagesRequest($defaultFilterRequestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLanguages'
     *
     * @param  \RtgConnector\RtgConnectBundle\Model\DefaultFilterRequestBody $defaultFilterRequestBody Default filter requestbody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLanguages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLanguagesRequest($defaultFilterRequestBody = null, string $contentType = self::contentTypes['getLanguages'][0])
    {



        $resourcePath = '/api/shop/v2/languages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($defaultFilterRequestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($defaultFilterRequestBody));
            } else {
                $httpBody = $defaultFilterRequestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrderStatuscodes
     *
     * getOrderStatuscodes
     *
     * @param  \RtgConnector\RtgConnectBundle\Model\DefaultFilterRequestBody $defaultFilterRequestBody Default filter requestbody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderStatuscodes'] to see the possible values for this operation
     *
     * @throws \RtgConnector\RtgConnectBundle\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RtgConnector\RtgConnectBundle\Model\SuccessResponse|\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse
     */
    public function getOrderStatuscodes($defaultFilterRequestBody = null, string $contentType = self::contentTypes['getOrderStatuscodes'][0])
    {
        list($response) = $this->getOrderStatuscodesWithHttpInfo($defaultFilterRequestBody, $contentType);
        return $response;
    }

    /**
     * Operation getOrderStatuscodesWithHttpInfo
     *
     * getOrderStatuscodes
     *
     * @param  \RtgConnector\RtgConnectBundle\Model\DefaultFilterRequestBody $defaultFilterRequestBody Default filter requestbody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderStatuscodes'] to see the possible values for this operation
     *
     * @throws \RtgConnector\RtgConnectBundle\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RtgConnector\RtgConnectBundle\Model\SuccessResponse|\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderStatuscodesWithHttpInfo($defaultFilterRequestBody = null, string $contentType = self::contentTypes['getOrderStatuscodes'][0])
    {
        $request = $this->getOrderStatuscodesRequest($defaultFilterRequestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RtgConnector\RtgConnectBundle\Model\SuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RtgConnector\RtgConnectBundle\Model\SuccessResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RtgConnector\RtgConnectBundle\Model\SuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RtgConnector\RtgConnectBundle\Model\SuccessResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RtgConnector\RtgConnectBundle\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderStatuscodesAsync
     *
     * getOrderStatuscodes
     *
     * @param  \RtgConnector\RtgConnectBundle\Model\DefaultFilterRequestBody $defaultFilterRequestBody Default filter requestbody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderStatuscodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderStatuscodesAsync($defaultFilterRequestBody = null, string $contentType = self::contentTypes['getOrderStatuscodes'][0])
    {
        return $this->getOrderStatuscodesAsyncWithHttpInfo($defaultFilterRequestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderStatuscodesAsyncWithHttpInfo
     *
     * getOrderStatuscodes
     *
     * @param  \RtgConnector\RtgConnectBundle\Model\DefaultFilterRequestBody $defaultFilterRequestBody Default filter requestbody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderStatuscodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderStatuscodesAsyncWithHttpInfo($defaultFilterRequestBody = null, string $contentType = self::contentTypes['getOrderStatuscodes'][0])
    {
        $returnType = '\RtgConnector\RtgConnectBundle\Model\SuccessResponse';
        $request = $this->getOrderStatuscodesRequest($defaultFilterRequestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderStatuscodes'
     *
     * @param  \RtgConnector\RtgConnectBundle\Model\DefaultFilterRequestBody $defaultFilterRequestBody Default filter requestbody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderStatuscodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrderStatuscodesRequest($defaultFilterRequestBody = null, string $contentType = self::contentTypes['getOrderStatuscodes'][0])
    {



        $resourcePath = '/api/shop/v2/order/statuscodes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($defaultFilterRequestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($defaultFilterRequestBody));
            } else {
                $httpBody = $defaultFilterRequestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductCategories
     *
     * getProductCategories
     *
     * @param  string $stockListToken Stocklist identifier, add in RTG-Portal [Stocklist » add](https://rtg-portal.picard.de/stocklists/create) (required)
     * @param  \RtgConnector\RtgConnectBundle\Model\DefaultFilterRequestBody $defaultFilterRequestBody Default filter requestbody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductCategories'] to see the possible values for this operation
     *
     * @throws \RtgConnector\RtgConnectBundle\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RtgConnector\RtgConnectBundle\Model\SuccessResponse|\RtgConnector\RtgConnectBundle\Model\DataTokenInvalidErrorResponse|\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse|\RtgConnector\RtgConnectBundle\Model\ShoptokenPermissionErrorResponse
     */
    public function getProductCategories($stockListToken, $defaultFilterRequestBody = null, string $contentType = self::contentTypes['getProductCategories'][0])
    {
        list($response) = $this->getProductCategoriesWithHttpInfo($stockListToken, $defaultFilterRequestBody, $contentType);
        return $response;
    }

    /**
     * Operation getProductCategoriesWithHttpInfo
     *
     * getProductCategories
     *
     * @param  string $stockListToken Stocklist identifier, add in RTG-Portal [Stocklist » add](https://rtg-portal.picard.de/stocklists/create) (required)
     * @param  \RtgConnector\RtgConnectBundle\Model\DefaultFilterRequestBody $defaultFilterRequestBody Default filter requestbody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductCategories'] to see the possible values for this operation
     *
     * @throws \RtgConnector\RtgConnectBundle\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RtgConnector\RtgConnectBundle\Model\SuccessResponse|\RtgConnector\RtgConnectBundle\Model\DataTokenInvalidErrorResponse|\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse|\RtgConnector\RtgConnectBundle\Model\ShoptokenPermissionErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductCategoriesWithHttpInfo($stockListToken, $defaultFilterRequestBody = null, string $contentType = self::contentTypes['getProductCategories'][0])
    {
        $request = $this->getProductCategoriesRequest($stockListToken, $defaultFilterRequestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RtgConnector\RtgConnectBundle\Model\SuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RtgConnector\RtgConnectBundle\Model\SuccessResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RtgConnector\RtgConnectBundle\Model\SuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\RtgConnector\RtgConnectBundle\Model\DataTokenInvalidErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RtgConnector\RtgConnectBundle\Model\DataTokenInvalidErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RtgConnector\RtgConnectBundle\Model\DataTokenInvalidErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\RtgConnector\RtgConnectBundle\Model\ShoptokenPermissionErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RtgConnector\RtgConnectBundle\Model\ShoptokenPermissionErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RtgConnector\RtgConnectBundle\Model\ShoptokenPermissionErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RtgConnector\RtgConnectBundle\Model\SuccessResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RtgConnector\RtgConnectBundle\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RtgConnector\RtgConnectBundle\Model\DataTokenInvalidErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RtgConnector\RtgConnectBundle\Model\ShoptokenPermissionErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductCategoriesAsync
     *
     * getProductCategories
     *
     * @param  string $stockListToken Stocklist identifier, add in RTG-Portal [Stocklist » add](https://rtg-portal.picard.de/stocklists/create) (required)
     * @param  \RtgConnector\RtgConnectBundle\Model\DefaultFilterRequestBody $defaultFilterRequestBody Default filter requestbody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductCategoriesAsync($stockListToken, $defaultFilterRequestBody = null, string $contentType = self::contentTypes['getProductCategories'][0])
    {
        return $this->getProductCategoriesAsyncWithHttpInfo($stockListToken, $defaultFilterRequestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductCategoriesAsyncWithHttpInfo
     *
     * getProductCategories
     *
     * @param  string $stockListToken Stocklist identifier, add in RTG-Portal [Stocklist » add](https://rtg-portal.picard.de/stocklists/create) (required)
     * @param  \RtgConnector\RtgConnectBundle\Model\DefaultFilterRequestBody $defaultFilterRequestBody Default filter requestbody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductCategoriesAsyncWithHttpInfo($stockListToken, $defaultFilterRequestBody = null, string $contentType = self::contentTypes['getProductCategories'][0])
    {
        $returnType = '\RtgConnector\RtgConnectBundle\Model\SuccessResponse';
        $request = $this->getProductCategoriesRequest($stockListToken, $defaultFilterRequestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductCategories'
     *
     * @param  string $stockListToken Stocklist identifier, add in RTG-Portal [Stocklist » add](https://rtg-portal.picard.de/stocklists/create) (required)
     * @param  \RtgConnector\RtgConnectBundle\Model\DefaultFilterRequestBody $defaultFilterRequestBody Default filter requestbody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProductCategoriesRequest($stockListToken, $defaultFilterRequestBody = null, string $contentType = self::contentTypes['getProductCategories'][0])
    {

        // verify the required parameter 'stockListToken' is set
        if ($stockListToken === null || (is_array($stockListToken) && count($stockListToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stockListToken when calling getProductCategories'
            );
        }



        $resourcePath = '/api/shop/v2/product/categories/{stockListToken}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($stockListToken !== null) {
            $resourcePath = str_replace(
                '{' . 'stockListToken' . '}',
                ObjectSerializer::toPathValue($stockListToken),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($defaultFilterRequestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($defaultFilterRequestBody));
            } else {
                $httpBody = $defaultFilterRequestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductManufacturers
     *
     * getProductManufacturers
     *
     * @param  string $stockListToken Stocklist identifier, add in RTG-Portal [Stocklist » add](https://rtg-portal.picard.de/stocklists/create) (required)
     * @param  \RtgConnector\RtgConnectBundle\Model\DefaultFilterRequestBody $defaultFilterRequestBody Default filter requestbody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductManufacturers'] to see the possible values for this operation
     *
     * @throws \RtgConnector\RtgConnectBundle\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RtgConnector\RtgConnectBundle\Model\SuccessResponse|\RtgConnector\RtgConnectBundle\Model\DataTokenInvalidErrorResponse|\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse|\RtgConnector\RtgConnectBundle\Model\ShoptokenPermissionErrorResponse
     */
    public function getProductManufacturers($stockListToken, $defaultFilterRequestBody = null, string $contentType = self::contentTypes['getProductManufacturers'][0])
    {
        list($response) = $this->getProductManufacturersWithHttpInfo($stockListToken, $defaultFilterRequestBody, $contentType);
        return $response;
    }

    /**
     * Operation getProductManufacturersWithHttpInfo
     *
     * getProductManufacturers
     *
     * @param  string $stockListToken Stocklist identifier, add in RTG-Portal [Stocklist » add](https://rtg-portal.picard.de/stocklists/create) (required)
     * @param  \RtgConnector\RtgConnectBundle\Model\DefaultFilterRequestBody $defaultFilterRequestBody Default filter requestbody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductManufacturers'] to see the possible values for this operation
     *
     * @throws \RtgConnector\RtgConnectBundle\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RtgConnector\RtgConnectBundle\Model\SuccessResponse|\RtgConnector\RtgConnectBundle\Model\DataTokenInvalidErrorResponse|\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse|\RtgConnector\RtgConnectBundle\Model\ShoptokenPermissionErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductManufacturersWithHttpInfo($stockListToken, $defaultFilterRequestBody = null, string $contentType = self::contentTypes['getProductManufacturers'][0])
    {
        $request = $this->getProductManufacturersRequest($stockListToken, $defaultFilterRequestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RtgConnector\RtgConnectBundle\Model\SuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RtgConnector\RtgConnectBundle\Model\SuccessResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RtgConnector\RtgConnectBundle\Model\SuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\RtgConnector\RtgConnectBundle\Model\DataTokenInvalidErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RtgConnector\RtgConnectBundle\Model\DataTokenInvalidErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RtgConnector\RtgConnectBundle\Model\DataTokenInvalidErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\RtgConnector\RtgConnectBundle\Model\ShoptokenPermissionErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RtgConnector\RtgConnectBundle\Model\ShoptokenPermissionErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RtgConnector\RtgConnectBundle\Model\ShoptokenPermissionErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RtgConnector\RtgConnectBundle\Model\SuccessResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RtgConnector\RtgConnectBundle\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RtgConnector\RtgConnectBundle\Model\DataTokenInvalidErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RtgConnector\RtgConnectBundle\Model\ShoptokenPermissionErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductManufacturersAsync
     *
     * getProductManufacturers
     *
     * @param  string $stockListToken Stocklist identifier, add in RTG-Portal [Stocklist » add](https://rtg-portal.picard.de/stocklists/create) (required)
     * @param  \RtgConnector\RtgConnectBundle\Model\DefaultFilterRequestBody $defaultFilterRequestBody Default filter requestbody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductManufacturers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductManufacturersAsync($stockListToken, $defaultFilterRequestBody = null, string $contentType = self::contentTypes['getProductManufacturers'][0])
    {
        return $this->getProductManufacturersAsyncWithHttpInfo($stockListToken, $defaultFilterRequestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductManufacturersAsyncWithHttpInfo
     *
     * getProductManufacturers
     *
     * @param  string $stockListToken Stocklist identifier, add in RTG-Portal [Stocklist » add](https://rtg-portal.picard.de/stocklists/create) (required)
     * @param  \RtgConnector\RtgConnectBundle\Model\DefaultFilterRequestBody $defaultFilterRequestBody Default filter requestbody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductManufacturers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductManufacturersAsyncWithHttpInfo($stockListToken, $defaultFilterRequestBody = null, string $contentType = self::contentTypes['getProductManufacturers'][0])
    {
        $returnType = '\RtgConnector\RtgConnectBundle\Model\SuccessResponse';
        $request = $this->getProductManufacturersRequest($stockListToken, $defaultFilterRequestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductManufacturers'
     *
     * @param  string $stockListToken Stocklist identifier, add in RTG-Portal [Stocklist » add](https://rtg-portal.picard.de/stocklists/create) (required)
     * @param  \RtgConnector\RtgConnectBundle\Model\DefaultFilterRequestBody $defaultFilterRequestBody Default filter requestbody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductManufacturers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProductManufacturersRequest($stockListToken, $defaultFilterRequestBody = null, string $contentType = self::contentTypes['getProductManufacturers'][0])
    {

        // verify the required parameter 'stockListToken' is set
        if ($stockListToken === null || (is_array($stockListToken) && count($stockListToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stockListToken when calling getProductManufacturers'
            );
        }



        $resourcePath = '/api/shop/v2/product/manufacturers/{stockListToken}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($stockListToken !== null) {
            $resourcePath = str_replace(
                '{' . 'stockListToken' . '}',
                ObjectSerializer::toPathValue($stockListToken),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($defaultFilterRequestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($defaultFilterRequestBody));
            } else {
                $httpBody = $defaultFilterRequestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateRequestStatus
     *
     * updateRequestStatus
     *
     * @param  int $requestId Request-id to set status for (required)
     * @param  string $status status of request (required)
     * @param  string $errorText Errortext, &#x60;REQUIRED&#x60; if &#x60;status &#x3D; 2&#x60; aa (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRequestStatus'] to see the possible values for this operation
     *
     * @throws \RtgConnector\RtgConnectBundle\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RtgConnector\RtgConnectBundle\Model\ReportRequestStatusResponse|\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse
     */
    public function updateRequestStatus($requestId, $status, $errorText, string $contentType = self::contentTypes['updateRequestStatus'][0])
    {
        list($response) = $this->updateRequestStatusWithHttpInfo($requestId, $status, $errorText, $contentType);
        return $response;
    }

    /**
     * Operation updateRequestStatusWithHttpInfo
     *
     * updateRequestStatus
     *
     * @param  int $requestId Request-id to set status for (required)
     * @param  string $status status of request (required)
     * @param  string $errorText Errortext, &#x60;REQUIRED&#x60; if &#x60;status &#x3D; 2&#x60; aa (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRequestStatus'] to see the possible values for this operation
     *
     * @throws \RtgConnector\RtgConnectBundle\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RtgConnector\RtgConnectBundle\Model\ReportRequestStatusResponse|\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateRequestStatusWithHttpInfo($requestId, $status, $errorText, string $contentType = self::contentTypes['updateRequestStatus'][0])
    {
        $request = $this->updateRequestStatusRequest($requestId, $status, $errorText, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 204:
                    if ('\RtgConnector\RtgConnectBundle\Model\ReportRequestStatusResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RtgConnector\RtgConnectBundle\Model\ReportRequestStatusResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RtgConnector\RtgConnectBundle\Model\ReportRequestStatusResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RtgConnector\RtgConnectBundle\Model\ReportRequestStatusResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RtgConnector\RtgConnectBundle\Model\ReportRequestStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RtgConnector\RtgConnectBundle\Model\ShoptokenInvalidErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateRequestStatusAsync
     *
     * updateRequestStatus
     *
     * @param  int $requestId Request-id to set status for (required)
     * @param  string $status status of request (required)
     * @param  string $errorText Errortext, &#x60;REQUIRED&#x60; if &#x60;status &#x3D; 2&#x60; aa (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRequestStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRequestStatusAsync($requestId, $status, $errorText, string $contentType = self::contentTypes['updateRequestStatus'][0])
    {
        return $this->updateRequestStatusAsyncWithHttpInfo($requestId, $status, $errorText, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateRequestStatusAsyncWithHttpInfo
     *
     * updateRequestStatus
     *
     * @param  int $requestId Request-id to set status for (required)
     * @param  string $status status of request (required)
     * @param  string $errorText Errortext, &#x60;REQUIRED&#x60; if &#x60;status &#x3D; 2&#x60; aa (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRequestStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRequestStatusAsyncWithHttpInfo($requestId, $status, $errorText, string $contentType = self::contentTypes['updateRequestStatus'][0])
    {
        $returnType = '\RtgConnector\RtgConnectBundle\Model\ReportRequestStatusResponse';
        $request = $this->updateRequestStatusRequest($requestId, $status, $errorText, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateRequestStatus'
     *
     * @param  int $requestId Request-id to set status for (required)
     * @param  string $status status of request (required)
     * @param  string $errorText Errortext, &#x60;REQUIRED&#x60; if &#x60;status &#x3D; 2&#x60; aa (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRequestStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateRequestStatusRequest($requestId, $status, $errorText, string $contentType = self::contentTypes['updateRequestStatus'][0])
    {

        // verify the required parameter 'requestId' is set
        if ($requestId === null || (is_array($requestId) && count($requestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $requestId when calling updateRequestStatus'
            );
        }

        // verify the required parameter 'status' is set
        if ($status === null || (is_array($status) && count($status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $status when calling updateRequestStatus'
            );
        }

        // verify the required parameter 'errorText' is set
        if ($errorText === null || (is_array($errorText) && count($errorText) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $errorText when calling updateRequestStatus'
            );
        }


        $resourcePath = '/api/shop/v2/report_request_status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $requestId,
            'request_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $errorText,
            'error_text', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
