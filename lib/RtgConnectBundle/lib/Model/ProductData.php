<?php
/**
 * ProductData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RtgConnector\RtgConnectBundle
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * RTG-Portal
 *
 * The RTG-Portal API is an interface for selected RTG-Shop customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: fabian.kaufmann@picard.de
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RtgConnector\RtgConnectBundle\Model;

use \ArrayAccess;
use \RtgConnector\RtgConnectBundle\ObjectSerializer;

/**
 * ProductData Class Doc Comment
 *
 * @category Class
 * @package  RtgConnector\RtgConnectBundle
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'productCategoryId' => 'int',
        'productManufacturerId' => 'int',
        'productName' => 'string',
        'ean' => 'int[]',
        'buildProducts' => '\RtgConnector\RtgConnectBundle\Model\ProductDataBuildProducts[]',
        'relatedProducts' => '\RtgConnector\RtgConnectBundle\Model\ProductDataRelatedProducts[]',
        'setProducts' => '\RtgConnector\RtgConnectBundle\Model\ProductDataSetProducts[]',
        'weight' => 'float',
        'width' => 'float',
        'innerDiameter' => 'float',
        'outerDiameter' => 'float',
        'searchText1' => 'string',
        'searchText2' => 'string',
        'searchText3' => 'string',
        'customsTariffNumber' => 'int',
        'attributes' => '\RtgConnector\RtgConnectBundle\Model\ProductAttribute[]',
        'price' => '\RtgConnector\RtgConnectBundle\Model\ProductDataPrice',
        'lineartech' => '\RtgConnector\RtgConnectBundle\Model\ProductDataLineartech',
        'image' => '\RtgConnector\RtgConnectBundle\Model\ProductDataImage',
        'quantity' => '\RtgConnector\RtgConnectBundle\Model\ProductDataQuantity',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime',
        'deletedAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'productCategoryId' => null,
        'productManufacturerId' => null,
        'productName' => null,
        'ean' => null,
        'buildProducts' => null,
        'relatedProducts' => null,
        'setProducts' => null,
        'weight' => 'float',
        'width' => 'float',
        'innerDiameter' => 'float',
        'outerDiameter' => 'float',
        'searchText1' => null,
        'searchText2' => null,
        'searchText3' => null,
        'customsTariffNumber' => null,
        'attributes' => null,
        'price' => null,
        'lineartech' => null,
        'image' => null,
        'quantity' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time',
        'deletedAt' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'productCategoryId' => false,
		'productManufacturerId' => false,
		'productName' => false,
		'ean' => true,
		'buildProducts' => true,
		'relatedProducts' => true,
		'setProducts' => true,
		'weight' => false,
		'width' => false,
		'innerDiameter' => false,
		'outerDiameter' => false,
		'searchText1' => true,
		'searchText2' => true,
		'searchText3' => true,
		'customsTariffNumber' => false,
		'attributes' => false,
		'price' => false,
		'lineartech' => false,
		'image' => false,
		'quantity' => false,
		'createdAt' => false,
		'updatedAt' => true,
		'deletedAt' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'productCategoryId' => 'product_category_id',
        'productManufacturerId' => 'product_manufacturer_id',
        'productName' => 'productName',
        'ean' => 'ean',
        'buildProducts' => 'buildProducts',
        'relatedProducts' => 'relatedProducts',
        'setProducts' => 'setProducts',
        'weight' => 'weight',
        'width' => 'width',
        'innerDiameter' => 'innerDiameter',
        'outerDiameter' => 'outerDiameter',
        'searchText1' => 'searchText1',
        'searchText2' => 'searchText2',
        'searchText3' => 'searchText3',
        'customsTariffNumber' => 'customsTariffNumber',
        'attributes' => 'attributes',
        'price' => 'price',
        'lineartech' => 'lineartech',
        'image' => 'image',
        'quantity' => 'quantity',
        'createdAt' => 'created_at',
        'updatedAt' => 'updated_at',
        'deletedAt' => 'deleted_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'productCategoryId' => 'setProductCategoryId',
        'productManufacturerId' => 'setProductManufacturerId',
        'productName' => 'setProductName',
        'ean' => 'setEan',
        'buildProducts' => 'setBuildProducts',
        'relatedProducts' => 'setRelatedProducts',
        'setProducts' => 'setSetProducts',
        'weight' => 'setWeight',
        'width' => 'setWidth',
        'innerDiameter' => 'setInnerDiameter',
        'outerDiameter' => 'setOuterDiameter',
        'searchText1' => 'setSearchText1',
        'searchText2' => 'setSearchText2',
        'searchText3' => 'setSearchText3',
        'customsTariffNumber' => 'setCustomsTariffNumber',
        'attributes' => 'setAttributes',
        'price' => 'setPrice',
        'lineartech' => 'setLineartech',
        'image' => 'setImage',
        'quantity' => 'setQuantity',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'deletedAt' => 'setDeletedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'productCategoryId' => 'getProductCategoryId',
        'productManufacturerId' => 'getProductManufacturerId',
        'productName' => 'getProductName',
        'ean' => 'getEan',
        'buildProducts' => 'getBuildProducts',
        'relatedProducts' => 'getRelatedProducts',
        'setProducts' => 'getSetProducts',
        'weight' => 'getWeight',
        'width' => 'getWidth',
        'innerDiameter' => 'getInnerDiameter',
        'outerDiameter' => 'getOuterDiameter',
        'searchText1' => 'getSearchText1',
        'searchText2' => 'getSearchText2',
        'searchText3' => 'getSearchText3',
        'customsTariffNumber' => 'getCustomsTariffNumber',
        'attributes' => 'getAttributes',
        'price' => 'getPrice',
        'lineartech' => 'getLineartech',
        'image' => 'getImage',
        'quantity' => 'getQuantity',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'deletedAt' => 'getDeletedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('productCategoryId', $data ?? [], null);
        $this->setIfExists('productManufacturerId', $data ?? [], null);
        $this->setIfExists('productName', $data ?? [], null);
        $this->setIfExists('ean', $data ?? [], null);
        $this->setIfExists('buildProducts', $data ?? [], null);
        $this->setIfExists('relatedProducts', $data ?? [], null);
        $this->setIfExists('setProducts', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('width', $data ?? [], null);
        $this->setIfExists('innerDiameter', $data ?? [], null);
        $this->setIfExists('outerDiameter', $data ?? [], null);
        $this->setIfExists('searchText1', $data ?? [], null);
        $this->setIfExists('searchText2', $data ?? [], null);
        $this->setIfExists('searchText3', $data ?? [], null);
        $this->setIfExists('customsTariffNumber', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('lineartech', $data ?? [], null);
        $this->setIfExists('image', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('deletedAt', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets productCategoryId
     *
     * @return int|null
     */
    public function getProductCategoryId()
    {
        return $this->container['productCategoryId'];
    }

    /**
     * Sets productCategoryId
     *
     * @param int|null $productCategoryId productCategoryId
     *
     * @return self
     */
    public function setProductCategoryId($productCategoryId)
    {
        if (is_null($productCategoryId)) {
            throw new \InvalidArgumentException('non-nullable productCategoryId cannot be null');
        }
        $this->container['productCategoryId'] = $productCategoryId;

        return $this;
    }

    /**
     * Gets productManufacturerId
     *
     * @return int|null
     */
    public function getProductManufacturerId()
    {
        return $this->container['productManufacturerId'];
    }

    /**
     * Sets productManufacturerId
     *
     * @param int|null $productManufacturerId productManufacturerId
     *
     * @return self
     */
    public function setProductManufacturerId($productManufacturerId)
    {
        if (is_null($productManufacturerId)) {
            throw new \InvalidArgumentException('non-nullable productManufacturerId cannot be null');
        }
        $this->container['productManufacturerId'] = $productManufacturerId;

        return $this;
    }

    /**
     * Gets productName
     *
     * @return string|null
     */
    public function getProductName()
    {
        return $this->container['productName'];
    }

    /**
     * Sets productName
     *
     * @param string|null $productName productName
     *
     * @return self
     */
    public function setProductName($productName)
    {
        if (is_null($productName)) {
            throw new \InvalidArgumentException('non-nullable productName cannot be null');
        }
        $this->container['productName'] = $productName;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return int[]|null
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param int[]|null $ean ean
     *
     * @return self
     */
    public function setEan($ean)
    {
        if (is_null($ean)) {
            array_push($this->openAPINullablesSetToNull, 'ean');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ean', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets buildProducts
     *
     * @return \RtgConnector\RtgConnectBundle\Model\ProductDataBuildProducts[]|null
     */
    public function getBuildProducts()
    {
        return $this->container['buildProducts'];
    }

    /**
     * Sets buildProducts
     *
     * @param \RtgConnector\RtgConnectBundle\Model\ProductDataBuildProducts[]|null $buildProducts buildProducts
     *
     * @return self
     */
    public function setBuildProducts($buildProducts)
    {
        if (is_null($buildProducts)) {
            array_push($this->openAPINullablesSetToNull, 'buildProducts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buildProducts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buildProducts'] = $buildProducts;

        return $this;
    }

    /**
     * Gets relatedProducts
     *
     * @return \RtgConnector\RtgConnectBundle\Model\ProductDataRelatedProducts[]|null
     */
    public function getRelatedProducts()
    {
        return $this->container['relatedProducts'];
    }

    /**
     * Sets relatedProducts
     *
     * @param \RtgConnector\RtgConnectBundle\Model\ProductDataRelatedProducts[]|null $relatedProducts relatedProducts
     *
     * @return self
     */
    public function setRelatedProducts($relatedProducts)
    {
        if (is_null($relatedProducts)) {
            array_push($this->openAPINullablesSetToNull, 'relatedProducts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('relatedProducts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['relatedProducts'] = $relatedProducts;

        return $this;
    }

    /**
     * Gets setProducts
     *
     * @return \RtgConnector\RtgConnectBundle\Model\ProductDataSetProducts[]|null
     */
    public function getSetProducts()
    {
        return $this->container['setProducts'];
    }

    /**
     * Sets setProducts
     *
     * @param \RtgConnector\RtgConnectBundle\Model\ProductDataSetProducts[]|null $setProducts setProducts
     *
     * @return self
     */
    public function setSetProducts($setProducts)
    {
        if (is_null($setProducts)) {
            array_push($this->openAPINullablesSetToNull, 'setProducts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('setProducts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['setProducts'] = $setProducts;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets width
     *
     * @return float|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param float|null $width width
     *
     * @return self
     */
    public function setWidth($width)
    {
        if (is_null($width)) {
            throw new \InvalidArgumentException('non-nullable width cannot be null');
        }
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets innerDiameter
     *
     * @return float|null
     */
    public function getInnerDiameter()
    {
        return $this->container['innerDiameter'];
    }

    /**
     * Sets innerDiameter
     *
     * @param float|null $innerDiameter innerDiameter
     *
     * @return self
     */
    public function setInnerDiameter($innerDiameter)
    {
        if (is_null($innerDiameter)) {
            throw new \InvalidArgumentException('non-nullable innerDiameter cannot be null');
        }
        $this->container['innerDiameter'] = $innerDiameter;

        return $this;
    }

    /**
     * Gets outerDiameter
     *
     * @return float|null
     */
    public function getOuterDiameter()
    {
        return $this->container['outerDiameter'];
    }

    /**
     * Sets outerDiameter
     *
     * @param float|null $outerDiameter outerDiameter
     *
     * @return self
     */
    public function setOuterDiameter($outerDiameter)
    {
        if (is_null($outerDiameter)) {
            throw new \InvalidArgumentException('non-nullable outerDiameter cannot be null');
        }
        $this->container['outerDiameter'] = $outerDiameter;

        return $this;
    }

    /**
     * Gets searchText1
     *
     * @return string|null
     */
    public function getSearchText1()
    {
        return $this->container['searchText1'];
    }

    /**
     * Sets searchText1
     *
     * @param string|null $searchText1 searchText1
     *
     * @return self
     */
    public function setSearchText1($searchText1)
    {
        if (is_null($searchText1)) {
            array_push($this->openAPINullablesSetToNull, 'searchText1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('searchText1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['searchText1'] = $searchText1;

        return $this;
    }

    /**
     * Gets searchText2
     *
     * @return string|null
     */
    public function getSearchText2()
    {
        return $this->container['searchText2'];
    }

    /**
     * Sets searchText2
     *
     * @param string|null $searchText2 searchText2
     *
     * @return self
     */
    public function setSearchText2($searchText2)
    {
        if (is_null($searchText2)) {
            array_push($this->openAPINullablesSetToNull, 'searchText2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('searchText2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['searchText2'] = $searchText2;

        return $this;
    }

    /**
     * Gets searchText3
     *
     * @return string|null
     */
    public function getSearchText3()
    {
        return $this->container['searchText3'];
    }

    /**
     * Sets searchText3
     *
     * @param string|null $searchText3 searchText3
     *
     * @return self
     */
    public function setSearchText3($searchText3)
    {
        if (is_null($searchText3)) {
            array_push($this->openAPINullablesSetToNull, 'searchText3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('searchText3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['searchText3'] = $searchText3;

        return $this;
    }

    /**
     * Gets customsTariffNumber
     *
     * @return int|null
     */
    public function getCustomsTariffNumber()
    {
        return $this->container['customsTariffNumber'];
    }

    /**
     * Sets customsTariffNumber
     *
     * @param int|null $customsTariffNumber customsTariffNumber
     *
     * @return self
     */
    public function setCustomsTariffNumber($customsTariffNumber)
    {
        if (is_null($customsTariffNumber)) {
            throw new \InvalidArgumentException('non-nullable customsTariffNumber cannot be null');
        }
        $this->container['customsTariffNumber'] = $customsTariffNumber;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \RtgConnector\RtgConnectBundle\Model\ProductAttribute[]|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \RtgConnector\RtgConnectBundle\Model\ProductAttribute[]|null $attributes attributes
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        if (is_null($attributes)) {
            throw new \InvalidArgumentException('non-nullable attributes cannot be null');
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \RtgConnector\RtgConnectBundle\Model\ProductDataPrice|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \RtgConnector\RtgConnectBundle\Model\ProductDataPrice|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets lineartech
     *
     * @return \RtgConnector\RtgConnectBundle\Model\ProductDataLineartech|null
     */
    public function getLineartech()
    {
        return $this->container['lineartech'];
    }

    /**
     * Sets lineartech
     *
     * @param \RtgConnector\RtgConnectBundle\Model\ProductDataLineartech|null $lineartech lineartech
     *
     * @return self
     */
    public function setLineartech($lineartech)
    {
        if (is_null($lineartech)) {
            throw new \InvalidArgumentException('non-nullable lineartech cannot be null');
        }
        $this->container['lineartech'] = $lineartech;

        return $this;
    }

    /**
     * Gets image
     *
     * @return \RtgConnector\RtgConnectBundle\Model\ProductDataImage|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param \RtgConnector\RtgConnectBundle\Model\ProductDataImage|null $image image
     *
     * @return self
     */
    public function setImage($image)
    {
        if (is_null($image)) {
            throw new \InvalidArgumentException('non-nullable image cannot be null');
        }
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return \RtgConnector\RtgConnectBundle\Model\ProductDataQuantity|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param \RtgConnector\RtgConnectBundle\Model\ProductDataQuantity|null $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt updatedAt
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            array_push($this->openAPINullablesSetToNull, 'updatedAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updatedAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets deletedAt
     *
     * @return \DateTime|null
     */
    public function getDeletedAt()
    {
        return $this->container['deletedAt'];
    }

    /**
     * Sets deletedAt
     *
     * @param \DateTime|null $deletedAt deletedAt
     *
     * @return self
     */
    public function setDeletedAt($deletedAt)
    {
        if (is_null($deletedAt)) {
            array_push($this->openAPINullablesSetToNull, 'deletedAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deletedAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deletedAt'] = $deletedAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


