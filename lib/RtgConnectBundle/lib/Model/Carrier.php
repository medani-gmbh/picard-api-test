<?php
/**
 * Carrier
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RtgConnector\RtgConnectBundle
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * RTG-Portal
 *
 * The RTG-Portal API is an interface for selected RTG-Shop customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: fabian.kaufmann@picard.de
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RtgConnector\RtgConnectBundle\Model;

use \ArrayAccess;
use \RtgConnector\RtgConnectBundle\ObjectSerializer;

/**
 * Carrier Class Doc Comment
 *
 * @category Class
 * @package  RtgConnector\RtgConnectBundle
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Carrier implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Carrier';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'shippingCode' => 'string',
        'shippingCompanyCode' => 'string',
        'shippingCompany' => 'string',
        'shippingName' => 'string',
        'shippingTime' => 'string',
        'shippingTimeFriday' => 'string',
        'shippingWeight' => 'float',
        'shippingLength' => 'int',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime',
        'deletedAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'shippingCode' => null,
        'shippingCompanyCode' => null,
        'shippingCompany' => null,
        'shippingName' => null,
        'shippingTime' => null,
        'shippingTimeFriday' => null,
        'shippingWeight' => 'float',
        'shippingLength' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time',
        'deletedAt' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'shippingCode' => false,
		'shippingCompanyCode' => false,
		'shippingCompany' => false,
		'shippingName' => false,
		'shippingTime' => false,
		'shippingTimeFriday' => false,
		'shippingWeight' => false,
		'shippingLength' => false,
		'createdAt' => false,
		'updatedAt' => true,
		'deletedAt' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'shippingCode' => 'shippingCode',
        'shippingCompanyCode' => 'shippingCompanyCode',
        'shippingCompany' => 'shippingCompany',
        'shippingName' => 'shippingName',
        'shippingTime' => 'shippingTime',
        'shippingTimeFriday' => 'shippingTimeFriday',
        'shippingWeight' => 'shippingWeight',
        'shippingLength' => 'shippingLength',
        'createdAt' => 'created_at',
        'updatedAt' => 'updated_at',
        'deletedAt' => 'deleted_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'shippingCode' => 'setShippingCode',
        'shippingCompanyCode' => 'setShippingCompanyCode',
        'shippingCompany' => 'setShippingCompany',
        'shippingName' => 'setShippingName',
        'shippingTime' => 'setShippingTime',
        'shippingTimeFriday' => 'setShippingTimeFriday',
        'shippingWeight' => 'setShippingWeight',
        'shippingLength' => 'setShippingLength',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'deletedAt' => 'setDeletedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'shippingCode' => 'getShippingCode',
        'shippingCompanyCode' => 'getShippingCompanyCode',
        'shippingCompany' => 'getShippingCompany',
        'shippingName' => 'getShippingName',
        'shippingTime' => 'getShippingTime',
        'shippingTimeFriday' => 'getShippingTimeFriday',
        'shippingWeight' => 'getShippingWeight',
        'shippingLength' => 'getShippingLength',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'deletedAt' => 'getDeletedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('shippingCode', $data ?? [], null);
        $this->setIfExists('shippingCompanyCode', $data ?? [], null);
        $this->setIfExists('shippingCompany', $data ?? [], null);
        $this->setIfExists('shippingName', $data ?? [], null);
        $this->setIfExists('shippingTime', $data ?? [], null);
        $this->setIfExists('shippingTimeFriday', $data ?? [], null);
        $this->setIfExists('shippingWeight', $data ?? [], null);
        $this->setIfExists('shippingLength', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('deletedAt', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets shippingCode
     *
     * @return string|null
     */
    public function getShippingCode()
    {
        return $this->container['shippingCode'];
    }

    /**
     * Sets shippingCode
     *
     * @param string|null $shippingCode shippingCode
     *
     * @return self
     */
    public function setShippingCode($shippingCode)
    {
        if (is_null($shippingCode)) {
            throw new \InvalidArgumentException('non-nullable shippingCode cannot be null');
        }
        $this->container['shippingCode'] = $shippingCode;

        return $this;
    }

    /**
     * Gets shippingCompanyCode
     *
     * @return string|null
     */
    public function getShippingCompanyCode()
    {
        return $this->container['shippingCompanyCode'];
    }

    /**
     * Sets shippingCompanyCode
     *
     * @param string|null $shippingCompanyCode shippingCompanyCode
     *
     * @return self
     */
    public function setShippingCompanyCode($shippingCompanyCode)
    {
        if (is_null($shippingCompanyCode)) {
            throw new \InvalidArgumentException('non-nullable shippingCompanyCode cannot be null');
        }
        $this->container['shippingCompanyCode'] = $shippingCompanyCode;

        return $this;
    }

    /**
     * Gets shippingCompany
     *
     * @return string|null
     */
    public function getShippingCompany()
    {
        return $this->container['shippingCompany'];
    }

    /**
     * Sets shippingCompany
     *
     * @param string|null $shippingCompany shippingCompany
     *
     * @return self
     */
    public function setShippingCompany($shippingCompany)
    {
        if (is_null($shippingCompany)) {
            throw new \InvalidArgumentException('non-nullable shippingCompany cannot be null');
        }
        $this->container['shippingCompany'] = $shippingCompany;

        return $this;
    }

    /**
     * Gets shippingName
     *
     * @return string|null
     */
    public function getShippingName()
    {
        return $this->container['shippingName'];
    }

    /**
     * Sets shippingName
     *
     * @param string|null $shippingName shippingName
     *
     * @return self
     */
    public function setShippingName($shippingName)
    {
        if (is_null($shippingName)) {
            throw new \InvalidArgumentException('non-nullable shippingName cannot be null');
        }
        $this->container['shippingName'] = $shippingName;

        return $this;
    }

    /**
     * Gets shippingTime
     *
     * @return string|null
     */
    public function getShippingTime()
    {
        return $this->container['shippingTime'];
    }

    /**
     * Sets shippingTime
     *
     * @param string|null $shippingTime shippingTime
     *
     * @return self
     */
    public function setShippingTime($shippingTime)
    {
        if (is_null($shippingTime)) {
            throw new \InvalidArgumentException('non-nullable shippingTime cannot be null');
        }
        $this->container['shippingTime'] = $shippingTime;

        return $this;
    }

    /**
     * Gets shippingTimeFriday
     *
     * @return string|null
     */
    public function getShippingTimeFriday()
    {
        return $this->container['shippingTimeFriday'];
    }

    /**
     * Sets shippingTimeFriday
     *
     * @param string|null $shippingTimeFriday shippingTimeFriday
     *
     * @return self
     */
    public function setShippingTimeFriday($shippingTimeFriday)
    {
        if (is_null($shippingTimeFriday)) {
            throw new \InvalidArgumentException('non-nullable shippingTimeFriday cannot be null');
        }
        $this->container['shippingTimeFriday'] = $shippingTimeFriday;

        return $this;
    }

    /**
     * Gets shippingWeight
     *
     * @return float|null
     */
    public function getShippingWeight()
    {
        return $this->container['shippingWeight'];
    }

    /**
     * Sets shippingWeight
     *
     * @param float|null $shippingWeight shippingWeight
     *
     * @return self
     */
    public function setShippingWeight($shippingWeight)
    {
        if (is_null($shippingWeight)) {
            throw new \InvalidArgumentException('non-nullable shippingWeight cannot be null');
        }
        $this->container['shippingWeight'] = $shippingWeight;

        return $this;
    }

    /**
     * Gets shippingLength
     *
     * @return int|null
     */
    public function getShippingLength()
    {
        return $this->container['shippingLength'];
    }

    /**
     * Sets shippingLength
     *
     * @param int|null $shippingLength shippingLength
     *
     * @return self
     */
    public function setShippingLength($shippingLength)
    {
        if (is_null($shippingLength)) {
            throw new \InvalidArgumentException('non-nullable shippingLength cannot be null');
        }
        $this->container['shippingLength'] = $shippingLength;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt updatedAt
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            array_push($this->openAPINullablesSetToNull, 'updatedAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updatedAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets deletedAt
     *
     * @return \DateTime|null
     */
    public function getDeletedAt()
    {
        return $this->container['deletedAt'];
    }

    /**
     * Sets deletedAt
     *
     * @param \DateTime|null $deletedAt deletedAt
     *
     * @return self
     */
    public function setDeletedAt($deletedAt)
    {
        if (is_null($deletedAt)) {
            array_push($this->openAPINullablesSetToNull, 'deletedAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deletedAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deletedAt'] = $deletedAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


