<?php
/**
 * CreateOrderRequestBody
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RtgConnector\RtgConnectBundle
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * RTG-Portal
 *
 * The RTG-Portal API is an interface for selected RTG-Shop customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: fabian.kaufmann@picard.de
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RtgConnector\RtgConnectBundle\Model;

use \ArrayAccess;
use \RtgConnector\RtgConnectBundle\ObjectSerializer;

/**
 * CreateOrderRequestBody Class Doc Comment
 *
 * @category Class
 * @package  RtgConnector\RtgConnectBundle
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateOrderRequestBody implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateOrderRequestBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'customersCustomerId' => 'int',
        'carrierId' => 'int',
        'orderNo' => 'string',
        'orderDate' => '\DateTime',
        'positions' => '\RtgConnector\RtgConnectBundle\Model\OrderDetailPosition[]',
        'invoice' => '\RtgConnector\RtgConnectBundle\Model\CreateOrderRequestBodyInvoice',
        'invoiceAddress' => '\RtgConnector\RtgConnectBundle\Model\CreateOrderRequestBodyInvoiceAddress',
        'deliveryAddress' => '\RtgConnector\RtgConnectBundle\Model\CreateOrderRequestBodyDeliveryAddress'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'customersCustomerId' => null,
        'carrierId' => null,
        'orderNo' => null,
        'orderDate' => 'date-time',
        'positions' => null,
        'invoice' => null,
        'invoiceAddress' => null,
        'deliveryAddress' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'customersCustomerId' => false,
		'carrierId' => false,
		'orderNo' => false,
		'orderDate' => false,
		'positions' => false,
		'invoice' => false,
		'invoiceAddress' => false,
		'deliveryAddress' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customersCustomerId' => 'customers_customer_id',
        'carrierId' => 'carrier_id',
        'orderNo' => 'order_no',
        'orderDate' => 'order_date',
        'positions' => 'positions',
        'invoice' => 'invoice',
        'invoiceAddress' => 'invoiceAddress',
        'deliveryAddress' => 'deliveryAddress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customersCustomerId' => 'setCustomersCustomerId',
        'carrierId' => 'setCarrierId',
        'orderNo' => 'setOrderNo',
        'orderDate' => 'setOrderDate',
        'positions' => 'setPositions',
        'invoice' => 'setInvoice',
        'invoiceAddress' => 'setInvoiceAddress',
        'deliveryAddress' => 'setDeliveryAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customersCustomerId' => 'getCustomersCustomerId',
        'carrierId' => 'getCarrierId',
        'orderNo' => 'getOrderNo',
        'orderDate' => 'getOrderDate',
        'positions' => 'getPositions',
        'invoice' => 'getInvoice',
        'invoiceAddress' => 'getInvoiceAddress',
        'deliveryAddress' => 'getDeliveryAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('customersCustomerId', $data ?? [], null);
        $this->setIfExists('carrierId', $data ?? [], null);
        $this->setIfExists('orderNo', $data ?? [], null);
        $this->setIfExists('orderDate', $data ?? [], null);
        $this->setIfExists('positions', $data ?? [], null);
        $this->setIfExists('invoice', $data ?? [], null);
        $this->setIfExists('invoiceAddress', $data ?? [], null);
        $this->setIfExists('deliveryAddress', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customersCustomerId
     *
     * @return int|null
     */
    public function getCustomersCustomerId()
    {
        return $this->container['customersCustomerId'];
    }

    /**
     * Sets customersCustomerId
     *
     * @param int|null $customersCustomerId customersCustomerId
     *
     * @return self
     */
    public function setCustomersCustomerId($customersCustomerId)
    {
        if (is_null($customersCustomerId)) {
            throw new \InvalidArgumentException('non-nullable customersCustomerId cannot be null');
        }
        $this->container['customersCustomerId'] = $customersCustomerId;

        return $this;
    }

    /**
     * Gets carrierId
     *
     * @return int|null
     */
    public function getCarrierId()
    {
        return $this->container['carrierId'];
    }

    /**
     * Sets carrierId
     *
     * @param int|null $carrierId carrierId
     *
     * @return self
     */
    public function setCarrierId($carrierId)
    {
        if (is_null($carrierId)) {
            throw new \InvalidArgumentException('non-nullable carrierId cannot be null');
        }
        $this->container['carrierId'] = $carrierId;

        return $this;
    }

    /**
     * Gets orderNo
     *
     * @return string|null
     */
    public function getOrderNo()
    {
        return $this->container['orderNo'];
    }

    /**
     * Sets orderNo
     *
     * @param string|null $orderNo orderNo
     *
     * @return self
     */
    public function setOrderNo($orderNo)
    {
        if (is_null($orderNo)) {
            throw new \InvalidArgumentException('non-nullable orderNo cannot be null');
        }
        $this->container['orderNo'] = $orderNo;

        return $this;
    }

    /**
     * Gets orderDate
     *
     * @return \DateTime|null
     */
    public function getOrderDate()
    {
        return $this->container['orderDate'];
    }

    /**
     * Sets orderDate
     *
     * @param \DateTime|null $orderDate orderDate
     *
     * @return self
     */
    public function setOrderDate($orderDate)
    {
        if (is_null($orderDate)) {
            throw new \InvalidArgumentException('non-nullable orderDate cannot be null');
        }
        $this->container['orderDate'] = $orderDate;

        return $this;
    }

    /**
     * Gets positions
     *
     * @return \RtgConnector\RtgConnectBundle\Model\OrderDetailPosition[]|null
     */
    public function getPositions()
    {
        return $this->container['positions'];
    }

    /**
     * Sets positions
     *
     * @param \RtgConnector\RtgConnectBundle\Model\OrderDetailPosition[]|null $positions positions
     *
     * @return self
     */
    public function setPositions($positions)
    {
        if (is_null($positions)) {
            throw new \InvalidArgumentException('non-nullable positions cannot be null');
        }
        $this->container['positions'] = $positions;

        return $this;
    }

    /**
     * Gets invoice
     *
     * @return \RtgConnector\RtgConnectBundle\Model\CreateOrderRequestBodyInvoice|null
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param \RtgConnector\RtgConnectBundle\Model\CreateOrderRequestBodyInvoice|null $invoice invoice
     *
     * @return self
     */
    public function setInvoice($invoice)
    {
        if (is_null($invoice)) {
            throw new \InvalidArgumentException('non-nullable invoice cannot be null');
        }
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets invoiceAddress
     *
     * @return \RtgConnector\RtgConnectBundle\Model\CreateOrderRequestBodyInvoiceAddress|null
     */
    public function getInvoiceAddress()
    {
        return $this->container['invoiceAddress'];
    }

    /**
     * Sets invoiceAddress
     *
     * @param \RtgConnector\RtgConnectBundle\Model\CreateOrderRequestBodyInvoiceAddress|null $invoiceAddress invoiceAddress
     *
     * @return self
     */
    public function setInvoiceAddress($invoiceAddress)
    {
        if (is_null($invoiceAddress)) {
            throw new \InvalidArgumentException('non-nullable invoiceAddress cannot be null');
        }
        $this->container['invoiceAddress'] = $invoiceAddress;

        return $this;
    }

    /**
     * Gets deliveryAddress
     *
     * @return \RtgConnector\RtgConnectBundle\Model\CreateOrderRequestBodyDeliveryAddress|null
     */
    public function getDeliveryAddress()
    {
        return $this->container['deliveryAddress'];
    }

    /**
     * Sets deliveryAddress
     *
     * @param \RtgConnector\RtgConnectBundle\Model\CreateOrderRequestBodyDeliveryAddress|null $deliveryAddress deliveryAddress
     *
     * @return self
     */
    public function setDeliveryAddress($deliveryAddress)
    {
        if (is_null($deliveryAddress)) {
            throw new \InvalidArgumentException('non-nullable deliveryAddress cannot be null');
        }
        $this->container['deliveryAddress'] = $deliveryAddress;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


