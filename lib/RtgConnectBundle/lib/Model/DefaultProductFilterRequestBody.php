<?php
/**
 * DefaultProductFilterRequestBody
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RtgConnector\RtgConnectBundle
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * RTG-Portal
 *
 * The RTG-Portal API is an interface for selected RTG-Shop customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: fabian.kaufmann@picard.de
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RtgConnector\RtgConnectBundle\Model;

use \ArrayAccess;
use \RtgConnector\RtgConnectBundle\ObjectSerializer;

/**
 * DefaultProductFilterRequestBody Class Doc Comment
 *
 * @category Class
 * @package  RtgConnector\RtgConnectBundle
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DefaultProductFilterRequestBody implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DefaultProductFilterRequestBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'limit' => 'int',
        'offset' => 'int',
        'requestId' => 'int',
        'forceFullData' => 'string',
        'dateLimitValue' => '\DateTime',
        'dateLimitOperator' => 'string',
        'dateLimitUpdated' => 'string',
        'dateLimitCreated' => 'string',
        'dateLimitDeleted' => 'string',
        'productId' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'limit' => null,
        'offset' => null,
        'requestId' => null,
        'forceFullData' => null,
        'dateLimitValue' => 'date-time',
        'dateLimitOperator' => null,
        'dateLimitUpdated' => null,
        'dateLimitCreated' => null,
        'dateLimitDeleted' => null,
        'productId' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'limit' => false,
		'offset' => false,
		'requestId' => false,
		'forceFullData' => false,
		'dateLimitValue' => false,
		'dateLimitOperator' => false,
		'dateLimitUpdated' => false,
		'dateLimitCreated' => false,
		'dateLimitDeleted' => false,
		'productId' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'limit' => 'limit',
        'offset' => 'offset',
        'requestId' => 'request_id',
        'forceFullData' => 'forceFullData',
        'dateLimitValue' => 'dateLimitValue',
        'dateLimitOperator' => 'dateLimitOperator',
        'dateLimitUpdated' => 'dateLimitUpdated',
        'dateLimitCreated' => 'dateLimitCreated',
        'dateLimitDeleted' => 'dateLimitDeleted',
        'productId' => 'product_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'limit' => 'setLimit',
        'offset' => 'setOffset',
        'requestId' => 'setRequestId',
        'forceFullData' => 'setForceFullData',
        'dateLimitValue' => 'setDateLimitValue',
        'dateLimitOperator' => 'setDateLimitOperator',
        'dateLimitUpdated' => 'setDateLimitUpdated',
        'dateLimitCreated' => 'setDateLimitCreated',
        'dateLimitDeleted' => 'setDateLimitDeleted',
        'productId' => 'setProductId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'limit' => 'getLimit',
        'offset' => 'getOffset',
        'requestId' => 'getRequestId',
        'forceFullData' => 'getForceFullData',
        'dateLimitValue' => 'getDateLimitValue',
        'dateLimitOperator' => 'getDateLimitOperator',
        'dateLimitUpdated' => 'getDateLimitUpdated',
        'dateLimitCreated' => 'getDateLimitCreated',
        'dateLimitDeleted' => 'getDateLimitDeleted',
        'productId' => 'getProductId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const FORCE_FULL_DATA_TRUE = 'true';
    public const FORCE_FULL_DATA_FALSE = 'false';
    public const DATE_LIMIT_UPDATED_TRUE = 'true';
    public const DATE_LIMIT_UPDATED_FALSE = 'false';
    public const DATE_LIMIT_CREATED_TRUE = 'true';
    public const DATE_LIMIT_CREATED_FALSE = 'false';
    public const DATE_LIMIT_DELETED_TRUE = 'true';
    public const DATE_LIMIT_DELETED_FALSE = 'false';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getForceFullDataAllowableValues()
    {
        return [
            self::FORCE_FULL_DATA_TRUE,
            self::FORCE_FULL_DATA_FALSE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDateLimitUpdatedAllowableValues()
    {
        return [
            self::DATE_LIMIT_UPDATED_TRUE,
            self::DATE_LIMIT_UPDATED_FALSE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDateLimitCreatedAllowableValues()
    {
        return [
            self::DATE_LIMIT_CREATED_TRUE,
            self::DATE_LIMIT_CREATED_FALSE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDateLimitDeletedAllowableValues()
    {
        return [
            self::DATE_LIMIT_DELETED_TRUE,
            self::DATE_LIMIT_DELETED_FALSE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('limit', $data ?? [], 100);
        $this->setIfExists('offset', $data ?? [], 0);
        $this->setIfExists('requestId', $data ?? [], null);
        $this->setIfExists('forceFullData', $data ?? [], 'false');
        $this->setIfExists('dateLimitValue', $data ?? [], null);
        $this->setIfExists('dateLimitOperator', $data ?? [], 'AND');
        $this->setIfExists('dateLimitUpdated', $data ?? [], 'true');
        $this->setIfExists('dateLimitCreated', $data ?? [], 'true');
        $this->setIfExists('dateLimitDeleted', $data ?? [], 'false');
        $this->setIfExists('productId', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getForceFullDataAllowableValues();
        if (!is_null($this->container['forceFullData']) && !in_array($this->container['forceFullData'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'forceFullData', must be one of '%s'",
                $this->container['forceFullData'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDateLimitUpdatedAllowableValues();
        if (!is_null($this->container['dateLimitUpdated']) && !in_array($this->container['dateLimitUpdated'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dateLimitUpdated', must be one of '%s'",
                $this->container['dateLimitUpdated'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDateLimitCreatedAllowableValues();
        if (!is_null($this->container['dateLimitCreated']) && !in_array($this->container['dateLimitCreated'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dateLimitCreated', must be one of '%s'",
                $this->container['dateLimitCreated'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDateLimitDeletedAllowableValues();
        if (!is_null($this->container['dateLimitDeleted']) && !in_array($this->container['dateLimitDeleted'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dateLimitDeleted', must be one of '%s'",
                $this->container['dateLimitDeleted'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets limit
     *
     * @return int|null
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int|null $limit Limit responsedataamount
     *
     * @return self
     */
    public function setLimit($limit)
    {
        if (is_null($limit)) {
            throw new \InvalidArgumentException('non-nullable limit cannot be null');
        }
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets offset
     *
     * @return int|null
     */
    public function getOffset()
    {
        return $this->container['offset'];
    }

    /**
     * Sets offset
     *
     * @param int|null $offset Responsedata offset
     *
     * @return self
     */
    public function setOffset($offset)
    {
        if (is_null($offset)) {
            throw new \InvalidArgumentException('non-nullable offset cannot be null');
        }
        $this->container['offset'] = $offset;

        return $this;
    }

    /**
     * Gets requestId
     *
     * @return int|null
     */
    public function getRequestId()
    {
        return $this->container['requestId'];
    }

    /**
     * Sets requestId
     *
     * @param int|null $requestId request_id to identify report request status
     *
     * @return self
     */
    public function setRequestId($requestId)
    {
        if (is_null($requestId)) {
            throw new \InvalidArgumentException('non-nullable requestId cannot be null');
        }
        $this->container['requestId'] = $requestId;

        return $this;
    }

    /**
     * Gets forceFullData
     *
     * @return string|null
     */
    public function getForceFullData()
    {
        return $this->container['forceFullData'];
    }

    /**
     * Sets forceFullData
     *
     * @param string|null $forceFullData Force full dataset, otherwise increment
     *
     * @return self
     */
    public function setForceFullData($forceFullData)
    {
        if (is_null($forceFullData)) {
            throw new \InvalidArgumentException('non-nullable forceFullData cannot be null');
        }
        $allowedValues = $this->getForceFullDataAllowableValues();
        if (!in_array($forceFullData, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'forceFullData', must be one of '%s'",
                    $forceFullData,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['forceFullData'] = $forceFullData;

        return $this;
    }

    /**
     * Gets dateLimitValue
     *
     * @return \DateTime|null
     */
    public function getDateLimitValue()
    {
        return $this->container['dateLimitValue'];
    }

    /**
     * Sets dateLimitValue
     *
     * @param \DateTime|null $dateLimitValue Datefilter value - `default = null = timestamp of last successfull import`
     *
     * @return self
     */
    public function setDateLimitValue($dateLimitValue)
    {
        if (is_null($dateLimitValue)) {
            throw new \InvalidArgumentException('non-nullable dateLimitValue cannot be null');
        }
        $this->container['dateLimitValue'] = $dateLimitValue;

        return $this;
    }

    /**
     * Gets dateLimitOperator
     *
     * @return string|null
     */
    public function getDateLimitOperator()
    {
        return $this->container['dateLimitOperator'];
    }

    /**
     * Sets dateLimitOperator
     *
     * @param string|null $dateLimitOperator Set AND or OR operator for datefilters
     *
     * @return self
     */
    public function setDateLimitOperator($dateLimitOperator)
    {
        if (is_null($dateLimitOperator)) {
            throw new \InvalidArgumentException('non-nullable dateLimitOperator cannot be null');
        }
        $this->container['dateLimitOperator'] = $dateLimitOperator;

        return $this;
    }

    /**
     * Gets dateLimitUpdated
     *
     * @return string|null
     */
    public function getDateLimitUpdated()
    {
        return $this->container['dateLimitUpdated'];
    }

    /**
     * Sets dateLimitUpdated
     *
     * @param string|null $dateLimitUpdated Filter updated_at date
     *
     * @return self
     */
    public function setDateLimitUpdated($dateLimitUpdated)
    {
        if (is_null($dateLimitUpdated)) {
            throw new \InvalidArgumentException('non-nullable dateLimitUpdated cannot be null');
        }
        $allowedValues = $this->getDateLimitUpdatedAllowableValues();
        if (!in_array($dateLimitUpdated, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dateLimitUpdated', must be one of '%s'",
                    $dateLimitUpdated,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dateLimitUpdated'] = $dateLimitUpdated;

        return $this;
    }

    /**
     * Gets dateLimitCreated
     *
     * @return string|null
     */
    public function getDateLimitCreated()
    {
        return $this->container['dateLimitCreated'];
    }

    /**
     * Sets dateLimitCreated
     *
     * @param string|null $dateLimitCreated Filter created_at date
     *
     * @return self
     */
    public function setDateLimitCreated($dateLimitCreated)
    {
        if (is_null($dateLimitCreated)) {
            throw new \InvalidArgumentException('non-nullable dateLimitCreated cannot be null');
        }
        $allowedValues = $this->getDateLimitCreatedAllowableValues();
        if (!in_array($dateLimitCreated, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dateLimitCreated', must be one of '%s'",
                    $dateLimitCreated,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dateLimitCreated'] = $dateLimitCreated;

        return $this;
    }

    /**
     * Gets dateLimitDeleted
     *
     * @return string|null
     */
    public function getDateLimitDeleted()
    {
        return $this->container['dateLimitDeleted'];
    }

    /**
     * Sets dateLimitDeleted
     *
     * @param string|null $dateLimitDeleted Filter deleted_at date
     *
     * @return self
     */
    public function setDateLimitDeleted($dateLimitDeleted)
    {
        if (is_null($dateLimitDeleted)) {
            throw new \InvalidArgumentException('non-nullable dateLimitDeleted cannot be null');
        }
        $allowedValues = $this->getDateLimitDeletedAllowableValues();
        if (!in_array($dateLimitDeleted, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dateLimitDeleted', must be one of '%s'",
                    $dateLimitDeleted,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dateLimitDeleted'] = $dateLimitDeleted;

        return $this;
    }

    /**
     * Gets productId
     *
     * @return int|null
     */
    public function getProductId()
    {
        return $this->container['productId'];
    }

    /**
     * Sets productId
     *
     * @param int|null $productId Check for specific product_id
     *
     * @return self
     */
    public function setProductId($productId)
    {
        if (is_null($productId)) {
            throw new \InvalidArgumentException('non-nullable productId cannot be null');
        }
        $this->container['productId'] = $productId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


