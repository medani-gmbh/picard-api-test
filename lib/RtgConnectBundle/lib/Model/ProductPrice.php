<?php
/**
 * ProductPrice
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RtgConnector\RtgConnectBundle
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * RTG-Portal
 *
 * The RTG-Portal API is an interface for selected RTG-Shop customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: fabian.kaufmann@picard.de
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RtgConnector\RtgConnectBundle\Model;

use \ArrayAccess;
use \RtgConnector\RtgConnectBundle\ObjectSerializer;

/**
 * ProductPrice Class Doc Comment
 *
 * @category Class
 * @package  RtgConnector\RtgConnectBundle
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductPrice implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = 'type';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductPrice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'productId' => 'int',
        'productPrice' => 'float',
        'listPrice' => 'float',
        'fictiveListPrice' => 'float',
        'occasionPrice' => 'float',
        'selectionPrice' => 'float',
        'lastYearPrice' => 'float',
        'currency' => 'string',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'productId' => null,
        'productPrice' => 'float',
        'listPrice' => 'float',
        'fictiveListPrice' => 'float',
        'occasionPrice' => 'float',
        'selectionPrice' => 'float',
        'lastYearPrice' => 'float',
        'currency' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'productId' => false,
		'productPrice' => false,
		'listPrice' => false,
		'fictiveListPrice' => false,
		'occasionPrice' => false,
		'selectionPrice' => false,
		'lastYearPrice' => false,
		'currency' => false,
		'createdAt' => false,
		'updatedAt' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'productId' => 'product_id',
        'productPrice' => 'productPrice',
        'listPrice' => 'listPrice',
        'fictiveListPrice' => 'fictiveListPrice',
        'occasionPrice' => 'occasionPrice',
        'selectionPrice' => 'selectionPrice',
        'lastYearPrice' => 'lastYearPrice',
        'currency' => 'currency',
        'createdAt' => 'created_at',
        'updatedAt' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'productId' => 'setProductId',
        'productPrice' => 'setProductPrice',
        'listPrice' => 'setListPrice',
        'fictiveListPrice' => 'setFictiveListPrice',
        'occasionPrice' => 'setOccasionPrice',
        'selectionPrice' => 'setSelectionPrice',
        'lastYearPrice' => 'setLastYearPrice',
        'currency' => 'setCurrency',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'productId' => 'getProductId',
        'productPrice' => 'getProductPrice',
        'listPrice' => 'getListPrice',
        'fictiveListPrice' => 'getFictiveListPrice',
        'occasionPrice' => 'getOccasionPrice',
        'selectionPrice' => 'getSelectionPrice',
        'lastYearPrice' => 'getLastYearPrice',
        'currency' => 'getCurrency',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('productId', $data ?? [], null);
        $this->setIfExists('productPrice', $data ?? [], null);
        $this->setIfExists('listPrice', $data ?? [], null);
        $this->setIfExists('fictiveListPrice', $data ?? [], null);
        $this->setIfExists('occasionPrice', $data ?? [], null);
        $this->setIfExists('selectionPrice', $data ?? [], null);
        $this->setIfExists('lastYearPrice', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);

        // Initialize discriminator property with the model name.
        $this->container['type'] = static::$openAPIModelName;
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets productId
     *
     * @return int|null
     */
    public function getProductId()
    {
        return $this->container['productId'];
    }

    /**
     * Sets productId
     *
     * @param int|null $productId productId
     *
     * @return self
     */
    public function setProductId($productId)
    {
        if (is_null($productId)) {
            throw new \InvalidArgumentException('non-nullable productId cannot be null');
        }
        $this->container['productId'] = $productId;

        return $this;
    }

    /**
     * Gets productPrice
     *
     * @return float|null
     */
    public function getProductPrice()
    {
        return $this->container['productPrice'];
    }

    /**
     * Sets productPrice
     *
     * @param float|null $productPrice productPrice
     *
     * @return self
     */
    public function setProductPrice($productPrice)
    {
        if (is_null($productPrice)) {
            throw new \InvalidArgumentException('non-nullable productPrice cannot be null');
        }
        $this->container['productPrice'] = $productPrice;

        return $this;
    }

    /**
     * Gets listPrice
     *
     * @return float|null
     */
    public function getListPrice()
    {
        return $this->container['listPrice'];
    }

    /**
     * Sets listPrice
     *
     * @param float|null $listPrice listPrice
     *
     * @return self
     */
    public function setListPrice($listPrice)
    {
        if (is_null($listPrice)) {
            throw new \InvalidArgumentException('non-nullable listPrice cannot be null');
        }
        $this->container['listPrice'] = $listPrice;

        return $this;
    }

    /**
     * Gets fictiveListPrice
     *
     * @return float|null
     */
    public function getFictiveListPrice()
    {
        return $this->container['fictiveListPrice'];
    }

    /**
     * Sets fictiveListPrice
     *
     * @param float|null $fictiveListPrice fictiveListPrice
     *
     * @return self
     */
    public function setFictiveListPrice($fictiveListPrice)
    {
        if (is_null($fictiveListPrice)) {
            throw new \InvalidArgumentException('non-nullable fictiveListPrice cannot be null');
        }
        $this->container['fictiveListPrice'] = $fictiveListPrice;

        return $this;
    }

    /**
     * Gets occasionPrice
     *
     * @return float|null
     */
    public function getOccasionPrice()
    {
        return $this->container['occasionPrice'];
    }

    /**
     * Sets occasionPrice
     *
     * @param float|null $occasionPrice occasionPrice
     *
     * @return self
     */
    public function setOccasionPrice($occasionPrice)
    {
        if (is_null($occasionPrice)) {
            throw new \InvalidArgumentException('non-nullable occasionPrice cannot be null');
        }
        $this->container['occasionPrice'] = $occasionPrice;

        return $this;
    }

    /**
     * Gets selectionPrice
     *
     * @return float|null
     */
    public function getSelectionPrice()
    {
        return $this->container['selectionPrice'];
    }

    /**
     * Sets selectionPrice
     *
     * @param float|null $selectionPrice selectionPrice
     *
     * @return self
     */
    public function setSelectionPrice($selectionPrice)
    {
        if (is_null($selectionPrice)) {
            throw new \InvalidArgumentException('non-nullable selectionPrice cannot be null');
        }
        $this->container['selectionPrice'] = $selectionPrice;

        return $this;
    }

    /**
     * Gets lastYearPrice
     *
     * @return float|null
     */
    public function getLastYearPrice()
    {
        return $this->container['lastYearPrice'];
    }

    /**
     * Sets lastYearPrice
     *
     * @param float|null $lastYearPrice lastYearPrice
     *
     * @return self
     */
    public function setLastYearPrice($lastYearPrice)
    {
        if (is_null($lastYearPrice)) {
            throw new \InvalidArgumentException('non-nullable lastYearPrice cannot be null');
        }
        $this->container['lastYearPrice'] = $lastYearPrice;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt updatedAt
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            array_push($this->openAPINullablesSetToNull, 'updatedAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updatedAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


