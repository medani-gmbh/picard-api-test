<?php
/**
 * Order
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RtgConnector\RtgConnectBundle
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * RTG-Portal
 *
 * The RTG-Portal API is an interface for selected RTG-Shop customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: fabian.kaufmann@picard.de
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RtgConnector\RtgConnectBundle\Model;

use \ArrayAccess;
use \RtgConnector\RtgConnectBundle\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @package  RtgConnector\RtgConnectBundle
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Order implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'customersCustomerId' => 'int',
        'carrierId' => 'int',
        'orderNo' => 'string',
        'currentStatusId' => 'int',
        'isPDFDelivered' => 'bool',
        'paymentMethod' => 'string',
        'totalShippingCosts' => 'float',
        'totalPaid' => 'float',
        'comment' => 'string',
        'deliveryNote' => 'string',
        'reference' => 'string',
        'discountName' => 'string',
        'discountCode' => 'string',
        'discountValue' => 'float',
        'sentToDatahub' => '\DateTime',
        'positions' => '\RtgConnector\RtgConnectBundle\Model\OrderDetailPosition[]',
        'invoice' => '\RtgConnector\RtgConnectBundle\Model\OrderDetailInvoice',
        'invoiceAddress' => '\RtgConnector\RtgConnectBundle\Model\OrderDetailInvoiceAddress',
        'deliveryAddress' => '\RtgConnector\RtgConnectBundle\Model\OrderDetailDeliveryAddress',
        'statusHistories' => '\RtgConnector\RtgConnectBundle\Model\OrderDetailStatusHistoryEntry[]',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime',
        'deletedAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'customersCustomerId' => null,
        'carrierId' => null,
        'orderNo' => null,
        'currentStatusId' => null,
        'isPDFDelivered' => null,
        'paymentMethod' => null,
        'totalShippingCosts' => 'float',
        'totalPaid' => 'float',
        'comment' => null,
        'deliveryNote' => null,
        'reference' => null,
        'discountName' => null,
        'discountCode' => null,
        'discountValue' => 'float',
        'sentToDatahub' => 'date-time',
        'positions' => null,
        'invoice' => null,
        'invoiceAddress' => null,
        'deliveryAddress' => null,
        'statusHistories' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time',
        'deletedAt' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'customersCustomerId' => false,
		'carrierId' => false,
		'orderNo' => false,
		'currentStatusId' => false,
		'isPDFDelivered' => false,
		'paymentMethod' => true,
		'totalShippingCosts' => true,
		'totalPaid' => true,
		'comment' => true,
		'deliveryNote' => true,
		'reference' => true,
		'discountName' => true,
		'discountCode' => true,
		'discountValue' => true,
		'sentToDatahub' => true,
		'positions' => false,
		'invoice' => false,
		'invoiceAddress' => false,
		'deliveryAddress' => false,
		'statusHistories' => false,
		'createdAt' => false,
		'updatedAt' => true,
		'deletedAt' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'customersCustomerId' => 'customers_customer_id',
        'carrierId' => 'carrier_id',
        'orderNo' => 'orderNo',
        'currentStatusId' => 'current_status_id',
        'isPDFDelivered' => 'isPDFDelivered',
        'paymentMethod' => 'paymentMethod',
        'totalShippingCosts' => 'totalShippingCosts',
        'totalPaid' => 'totalPaid',
        'comment' => 'comment',
        'deliveryNote' => 'deliveryNote',
        'reference' => 'reference',
        'discountName' => 'discountName',
        'discountCode' => 'discountCode',
        'discountValue' => 'discountValue',
        'sentToDatahub' => 'sentToDatahub',
        'positions' => 'positions',
        'invoice' => 'invoice',
        'invoiceAddress' => 'invoiceAddress',
        'deliveryAddress' => 'deliveryAddress',
        'statusHistories' => 'status_histories',
        'createdAt' => 'created_at',
        'updatedAt' => 'updated_at',
        'deletedAt' => 'deleted_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'customersCustomerId' => 'setCustomersCustomerId',
        'carrierId' => 'setCarrierId',
        'orderNo' => 'setOrderNo',
        'currentStatusId' => 'setCurrentStatusId',
        'isPDFDelivered' => 'setIsPDFDelivered',
        'paymentMethod' => 'setPaymentMethod',
        'totalShippingCosts' => 'setTotalShippingCosts',
        'totalPaid' => 'setTotalPaid',
        'comment' => 'setComment',
        'deliveryNote' => 'setDeliveryNote',
        'reference' => 'setReference',
        'discountName' => 'setDiscountName',
        'discountCode' => 'setDiscountCode',
        'discountValue' => 'setDiscountValue',
        'sentToDatahub' => 'setSentToDatahub',
        'positions' => 'setPositions',
        'invoice' => 'setInvoice',
        'invoiceAddress' => 'setInvoiceAddress',
        'deliveryAddress' => 'setDeliveryAddress',
        'statusHistories' => 'setStatusHistories',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'deletedAt' => 'setDeletedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'customersCustomerId' => 'getCustomersCustomerId',
        'carrierId' => 'getCarrierId',
        'orderNo' => 'getOrderNo',
        'currentStatusId' => 'getCurrentStatusId',
        'isPDFDelivered' => 'getIsPDFDelivered',
        'paymentMethod' => 'getPaymentMethod',
        'totalShippingCosts' => 'getTotalShippingCosts',
        'totalPaid' => 'getTotalPaid',
        'comment' => 'getComment',
        'deliveryNote' => 'getDeliveryNote',
        'reference' => 'getReference',
        'discountName' => 'getDiscountName',
        'discountCode' => 'getDiscountCode',
        'discountValue' => 'getDiscountValue',
        'sentToDatahub' => 'getSentToDatahub',
        'positions' => 'getPositions',
        'invoice' => 'getInvoice',
        'invoiceAddress' => 'getInvoiceAddress',
        'deliveryAddress' => 'getDeliveryAddress',
        'statusHistories' => 'getStatusHistories',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'deletedAt' => 'getDeletedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('customersCustomerId', $data ?? [], null);
        $this->setIfExists('carrierId', $data ?? [], null);
        $this->setIfExists('orderNo', $data ?? [], null);
        $this->setIfExists('currentStatusId', $data ?? [], null);
        $this->setIfExists('isPDFDelivered', $data ?? [], null);
        $this->setIfExists('paymentMethod', $data ?? [], null);
        $this->setIfExists('totalShippingCosts', $data ?? [], null);
        $this->setIfExists('totalPaid', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('deliveryNote', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('discountName', $data ?? [], null);
        $this->setIfExists('discountCode', $data ?? [], null);
        $this->setIfExists('discountValue', $data ?? [], null);
        $this->setIfExists('sentToDatahub', $data ?? [], null);
        $this->setIfExists('positions', $data ?? [], null);
        $this->setIfExists('invoice', $data ?? [], null);
        $this->setIfExists('invoiceAddress', $data ?? [], null);
        $this->setIfExists('deliveryAddress', $data ?? [], null);
        $this->setIfExists('statusHistories', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('deletedAt', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets customersCustomerId
     *
     * @return int|null
     */
    public function getCustomersCustomerId()
    {
        return $this->container['customersCustomerId'];
    }

    /**
     * Sets customersCustomerId
     *
     * @param int|null $customersCustomerId customersCustomerId
     *
     * @return self
     */
    public function setCustomersCustomerId($customersCustomerId)
    {
        if (is_null($customersCustomerId)) {
            throw new \InvalidArgumentException('non-nullable customersCustomerId cannot be null');
        }
        $this->container['customersCustomerId'] = $customersCustomerId;

        return $this;
    }

    /**
     * Gets carrierId
     *
     * @return int|null
     */
    public function getCarrierId()
    {
        return $this->container['carrierId'];
    }

    /**
     * Sets carrierId
     *
     * @param int|null $carrierId carrierId
     *
     * @return self
     */
    public function setCarrierId($carrierId)
    {
        if (is_null($carrierId)) {
            throw new \InvalidArgumentException('non-nullable carrierId cannot be null');
        }
        $this->container['carrierId'] = $carrierId;

        return $this;
    }

    /**
     * Gets orderNo
     *
     * @return string|null
     */
    public function getOrderNo()
    {
        return $this->container['orderNo'];
    }

    /**
     * Sets orderNo
     *
     * @param string|null $orderNo orderNo
     *
     * @return self
     */
    public function setOrderNo($orderNo)
    {
        if (is_null($orderNo)) {
            throw new \InvalidArgumentException('non-nullable orderNo cannot be null');
        }
        $this->container['orderNo'] = $orderNo;

        return $this;
    }

    /**
     * Gets currentStatusId
     *
     * @return int|null
     */
    public function getCurrentStatusId()
    {
        return $this->container['currentStatusId'];
    }

    /**
     * Sets currentStatusId
     *
     * @param int|null $currentStatusId currentStatusId
     *
     * @return self
     */
    public function setCurrentStatusId($currentStatusId)
    {
        if (is_null($currentStatusId)) {
            throw new \InvalidArgumentException('non-nullable currentStatusId cannot be null');
        }
        $this->container['currentStatusId'] = $currentStatusId;

        return $this;
    }

    /**
     * Gets isPDFDelivered
     *
     * @return bool|null
     */
    public function getIsPDFDelivered()
    {
        return $this->container['isPDFDelivered'];
    }

    /**
     * Sets isPDFDelivered
     *
     * @param bool|null $isPDFDelivered isPDFDelivered
     *
     * @return self
     */
    public function setIsPDFDelivered($isPDFDelivered)
    {
        if (is_null($isPDFDelivered)) {
            throw new \InvalidArgumentException('non-nullable isPDFDelivered cannot be null');
        }
        $this->container['isPDFDelivered'] = $isPDFDelivered;

        return $this;
    }

    /**
     * Gets paymentMethod
     *
     * @return string|null
     */
    public function getPaymentMethod()
    {
        return $this->container['paymentMethod'];
    }

    /**
     * Sets paymentMethod
     *
     * @param string|null $paymentMethod paymentMethod
     *
     * @return self
     */
    public function setPaymentMethod($paymentMethod)
    {
        if (is_null($paymentMethod)) {
            array_push($this->openAPINullablesSetToNull, 'paymentMethod');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paymentMethod', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paymentMethod'] = $paymentMethod;

        return $this;
    }

    /**
     * Gets totalShippingCosts
     *
     * @return float|null
     */
    public function getTotalShippingCosts()
    {
        return $this->container['totalShippingCosts'];
    }

    /**
     * Sets totalShippingCosts
     *
     * @param float|null $totalShippingCosts totalShippingCosts
     *
     * @return self
     */
    public function setTotalShippingCosts($totalShippingCosts)
    {
        if (is_null($totalShippingCosts)) {
            array_push($this->openAPINullablesSetToNull, 'totalShippingCosts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('totalShippingCosts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['totalShippingCosts'] = $totalShippingCosts;

        return $this;
    }

    /**
     * Gets totalPaid
     *
     * @return float|null
     */
    public function getTotalPaid()
    {
        return $this->container['totalPaid'];
    }

    /**
     * Sets totalPaid
     *
     * @param float|null $totalPaid totalPaid
     *
     * @return self
     */
    public function setTotalPaid($totalPaid)
    {
        if (is_null($totalPaid)) {
            array_push($this->openAPINullablesSetToNull, 'totalPaid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('totalPaid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['totalPaid'] = $totalPaid;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            array_push($this->openAPINullablesSetToNull, 'comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('comment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets deliveryNote
     *
     * @return string|null
     */
    public function getDeliveryNote()
    {
        return $this->container['deliveryNote'];
    }

    /**
     * Sets deliveryNote
     *
     * @param string|null $deliveryNote deliveryNote
     *
     * @return self
     */
    public function setDeliveryNote($deliveryNote)
    {
        if (is_null($deliveryNote)) {
            array_push($this->openAPINullablesSetToNull, 'deliveryNote');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deliveryNote', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deliveryNote'] = $deliveryNote;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference reference
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            array_push($this->openAPINullablesSetToNull, 'reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets discountName
     *
     * @return string|null
     */
    public function getDiscountName()
    {
        return $this->container['discountName'];
    }

    /**
     * Sets discountName
     *
     * @param string|null $discountName discountName
     *
     * @return self
     */
    public function setDiscountName($discountName)
    {
        if (is_null($discountName)) {
            array_push($this->openAPINullablesSetToNull, 'discountName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discountName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['discountName'] = $discountName;

        return $this;
    }

    /**
     * Gets discountCode
     *
     * @return string|null
     */
    public function getDiscountCode()
    {
        return $this->container['discountCode'];
    }

    /**
     * Sets discountCode
     *
     * @param string|null $discountCode discountCode
     *
     * @return self
     */
    public function setDiscountCode($discountCode)
    {
        if (is_null($discountCode)) {
            array_push($this->openAPINullablesSetToNull, 'discountCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discountCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['discountCode'] = $discountCode;

        return $this;
    }

    /**
     * Gets discountValue
     *
     * @return float|null
     */
    public function getDiscountValue()
    {
        return $this->container['discountValue'];
    }

    /**
     * Sets discountValue
     *
     * @param float|null $discountValue discountValue
     *
     * @return self
     */
    public function setDiscountValue($discountValue)
    {
        if (is_null($discountValue)) {
            array_push($this->openAPINullablesSetToNull, 'discountValue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discountValue', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['discountValue'] = $discountValue;

        return $this;
    }

    /**
     * Gets sentToDatahub
     *
     * @return \DateTime|null
     */
    public function getSentToDatahub()
    {
        return $this->container['sentToDatahub'];
    }

    /**
     * Sets sentToDatahub
     *
     * @param \DateTime|null $sentToDatahub sentToDatahub
     *
     * @return self
     */
    public function setSentToDatahub($sentToDatahub)
    {
        if (is_null($sentToDatahub)) {
            array_push($this->openAPINullablesSetToNull, 'sentToDatahub');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sentToDatahub', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sentToDatahub'] = $sentToDatahub;

        return $this;
    }

    /**
     * Gets positions
     *
     * @return \RtgConnector\RtgConnectBundle\Model\OrderDetailPosition[]|null
     */
    public function getPositions()
    {
        return $this->container['positions'];
    }

    /**
     * Sets positions
     *
     * @param \RtgConnector\RtgConnectBundle\Model\OrderDetailPosition[]|null $positions positions
     *
     * @return self
     */
    public function setPositions($positions)
    {
        if (is_null($positions)) {
            throw new \InvalidArgumentException('non-nullable positions cannot be null');
        }
        $this->container['positions'] = $positions;

        return $this;
    }

    /**
     * Gets invoice
     *
     * @return \RtgConnector\RtgConnectBundle\Model\OrderDetailInvoice|null
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param \RtgConnector\RtgConnectBundle\Model\OrderDetailInvoice|null $invoice invoice
     *
     * @return self
     */
    public function setInvoice($invoice)
    {
        if (is_null($invoice)) {
            throw new \InvalidArgumentException('non-nullable invoice cannot be null');
        }
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets invoiceAddress
     *
     * @return \RtgConnector\RtgConnectBundle\Model\OrderDetailInvoiceAddress|null
     */
    public function getInvoiceAddress()
    {
        return $this->container['invoiceAddress'];
    }

    /**
     * Sets invoiceAddress
     *
     * @param \RtgConnector\RtgConnectBundle\Model\OrderDetailInvoiceAddress|null $invoiceAddress invoiceAddress
     *
     * @return self
     */
    public function setInvoiceAddress($invoiceAddress)
    {
        if (is_null($invoiceAddress)) {
            throw new \InvalidArgumentException('non-nullable invoiceAddress cannot be null');
        }
        $this->container['invoiceAddress'] = $invoiceAddress;

        return $this;
    }

    /**
     * Gets deliveryAddress
     *
     * @return \RtgConnector\RtgConnectBundle\Model\OrderDetailDeliveryAddress|null
     */
    public function getDeliveryAddress()
    {
        return $this->container['deliveryAddress'];
    }

    /**
     * Sets deliveryAddress
     *
     * @param \RtgConnector\RtgConnectBundle\Model\OrderDetailDeliveryAddress|null $deliveryAddress deliveryAddress
     *
     * @return self
     */
    public function setDeliveryAddress($deliveryAddress)
    {
        if (is_null($deliveryAddress)) {
            throw new \InvalidArgumentException('non-nullable deliveryAddress cannot be null');
        }
        $this->container['deliveryAddress'] = $deliveryAddress;

        return $this;
    }

    /**
     * Gets statusHistories
     *
     * @return \RtgConnector\RtgConnectBundle\Model\OrderDetailStatusHistoryEntry[]|null
     */
    public function getStatusHistories()
    {
        return $this->container['statusHistories'];
    }

    /**
     * Sets statusHistories
     *
     * @param \RtgConnector\RtgConnectBundle\Model\OrderDetailStatusHistoryEntry[]|null $statusHistories statusHistories
     *
     * @return self
     */
    public function setStatusHistories($statusHistories)
    {
        if (is_null($statusHistories)) {
            throw new \InvalidArgumentException('non-nullable statusHistories cannot be null');
        }
        $this->container['statusHistories'] = $statusHistories;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt updatedAt
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            array_push($this->openAPINullablesSetToNull, 'updatedAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updatedAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets deletedAt
     *
     * @return \DateTime|null
     */
    public function getDeletedAt()
    {
        return $this->container['deletedAt'];
    }

    /**
     * Sets deletedAt
     *
     * @param \DateTime|null $deletedAt deletedAt
     *
     * @return self
     */
    public function setDeletedAt($deletedAt)
    {
        if (is_null($deletedAt)) {
            array_push($this->openAPINullablesSetToNull, 'deletedAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deletedAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deletedAt'] = $deletedAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


