<?php
/**
 * SuccessResponseData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RtgConnector\RtgConnectBundle
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * RTG-Portal
 *
 * The RTG-Portal API is an interface for selected RTG-Shop customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: fabian.kaufmann@picard.de
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RtgConnector\RtgConnectBundle\Model;

use \ArrayAccess;
use \RtgConnector\RtgConnectBundle\ObjectSerializer;

/**
 * SuccessResponseData Class Doc Comment
 *
 * @category Class
 * @package  RtgConnector\RtgConnectBundle
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SuccessResponseData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SuccessResponseData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'shortISO' => 'string',
        'languageName' => 'string',
        'isPublished' => 'bool',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime',
        'parentProductCategoryId' => 'int',
        'layer' => 'int',
        'amountProducts' => 'int',
        'categoryLang' => '\RtgConnector\RtgConnectBundle\Model\CategoryCategoryLangInner[]',
        'subCategories' => '\RtgConnector\RtgConnectBundle\Model\CategorySubCategoriesInner[]',
        'shortName' => 'string',
        'fullName' => 'string',
        'deletedAt' => '\DateTime',
        'shippingCode' => 'string',
        'shippingCompanyCode' => 'string',
        'shippingCompany' => 'string',
        'shippingName' => 'string',
        'shippingTime' => 'string',
        'shippingTimeFriday' => 'string',
        'shippingWeight' => 'float',
        'shippingLength' => 'int',
        'languageId' => 'int',
        'text' => 'string',
        'icon' => 'string',
        'isPositive' => 'bool',
        'isShipping' => 'bool',
        'productCategoryId' => 'int',
        'productManufacturerId' => 'int',
        'productName' => 'string',
        'ean' => 'int[]',
        'buildProducts' => '\RtgConnector\RtgConnectBundle\Model\ProductDataBuildProducts[]',
        'relatedProducts' => '\RtgConnector\RtgConnectBundle\Model\ProductDataRelatedProducts[]',
        'setProducts' => '\RtgConnector\RtgConnectBundle\Model\ProductDataSetProducts[]',
        'weight' => 'float',
        'width' => 'float',
        'innerDiameter' => 'float',
        'outerDiameter' => 'float',
        'searchText1' => 'string',
        'searchText2' => 'string',
        'searchText3' => 'string',
        'customsTariffNumber' => 'int',
        'attributes' => '\RtgConnector\RtgConnectBundle\Model\ProductAttribute[]',
        'price' => '\RtgConnector\RtgConnectBundle\Model\ProductDataPrice',
        'lineartech' => '\RtgConnector\RtgConnectBundle\Model\ProductDataLineartech',
        'image' => '\RtgConnector\RtgConnectBundle\Model\ProductDataImage',
        'quantity' => 'int',
        'productId' => 'int',
        'productPrice' => 'float',
        'listPrice' => 'float',
        'fictiveListPrice' => 'float',
        'occasionPrice' => 'float',
        'selectionPrice' => 'float',
        'lastYearPrice' => 'float',
        'currency' => 'string',
        'filename' => 'string',
        'base64' => 'string',
        'lengthOriginal' => 'int',
        'lengthInStock' => 'int',
        'lengthLeft' => 'int',
        'lengthRight' => 'int',
        'keyId' => 'int',
        'key' => 'string',
        'valueId' => 'int',
        'value' => 'string',
        'customersCustomerId' => 'int',
        'carrierId' => 'int',
        'orderNo' => 'string',
        'currentStatusId' => 'int',
        'isPDFDelivered' => 'bool',
        'paymentMethod' => 'string',
        'totalShippingCosts' => 'float',
        'totalPaid' => 'float',
        'comment' => 'string',
        'deliveryNote' => 'string',
        'reference' => 'string',
        'discountName' => 'string',
        'discountCode' => 'string',
        'discountValue' => 'float',
        'sentToDatahub' => '\DateTime',
        'positions' => '\RtgConnector\RtgConnectBundle\Model\OrderDetailPosition[]',
        'invoice' => '\RtgConnector\RtgConnectBundle\Model\OrderDetailInvoice',
        'invoiceAddress' => '\RtgConnector\RtgConnectBundle\Model\OrderDetailInvoiceAddress',
        'deliveryAddress' => '\RtgConnector\RtgConnectBundle\Model\OrderDetailDeliveryAddress',
        'statusHistories' => '\RtgConnector\RtgConnectBundle\Model\OrderDetailStatusHistoryEntry[]',
        'orderId' => 'int',
        'orderStatuscodeId' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'shortISO' => null,
        'languageName' => null,
        'isPublished' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time',
        'parentProductCategoryId' => null,
        'layer' => null,
        'amountProducts' => null,
        'categoryLang' => null,
        'subCategories' => null,
        'shortName' => null,
        'fullName' => null,
        'deletedAt' => 'date-time',
        'shippingCode' => null,
        'shippingCompanyCode' => null,
        'shippingCompany' => null,
        'shippingName' => null,
        'shippingTime' => null,
        'shippingTimeFriday' => null,
        'shippingWeight' => 'float',
        'shippingLength' => null,
        'languageId' => null,
        'text' => null,
        'icon' => null,
        'isPositive' => null,
        'isShipping' => null,
        'productCategoryId' => null,
        'productManufacturerId' => null,
        'productName' => null,
        'ean' => null,
        'buildProducts' => null,
        'relatedProducts' => null,
        'setProducts' => null,
        'weight' => 'float',
        'width' => 'float',
        'innerDiameter' => 'float',
        'outerDiameter' => 'float',
        'searchText1' => null,
        'searchText2' => null,
        'searchText3' => null,
        'customsTariffNumber' => null,
        'attributes' => null,
        'price' => null,
        'lineartech' => null,
        'image' => null,
        'quantity' => null,
        'productId' => null,
        'productPrice' => 'float',
        'listPrice' => 'float',
        'fictiveListPrice' => 'float',
        'occasionPrice' => 'float',
        'selectionPrice' => 'float',
        'lastYearPrice' => 'float',
        'currency' => null,
        'filename' => null,
        'base64' => null,
        'lengthOriginal' => null,
        'lengthInStock' => null,
        'lengthLeft' => null,
        'lengthRight' => null,
        'keyId' => null,
        'key' => null,
        'valueId' => null,
        'value' => null,
        'customersCustomerId' => null,
        'carrierId' => null,
        'orderNo' => null,
        'currentStatusId' => null,
        'isPDFDelivered' => null,
        'paymentMethod' => null,
        'totalShippingCosts' => 'float',
        'totalPaid' => 'float',
        'comment' => null,
        'deliveryNote' => null,
        'reference' => null,
        'discountName' => null,
        'discountCode' => null,
        'discountValue' => 'float',
        'sentToDatahub' => 'date-time',
        'positions' => null,
        'invoice' => null,
        'invoiceAddress' => null,
        'deliveryAddress' => null,
        'statusHistories' => null,
        'orderId' => null,
        'orderStatuscodeId' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'shortISO' => false,
		'languageName' => false,
		'isPublished' => false,
		'createdAt' => false,
		'updatedAt' => true,
		'parentProductCategoryId' => true,
		'layer' => false,
		'amountProducts' => false,
		'categoryLang' => false,
		'subCategories' => false,
		'shortName' => false,
		'fullName' => false,
		'deletedAt' => true,
		'shippingCode' => false,
		'shippingCompanyCode' => false,
		'shippingCompany' => false,
		'shippingName' => false,
		'shippingTime' => false,
		'shippingTimeFriday' => false,
		'shippingWeight' => false,
		'shippingLength' => false,
		'languageId' => false,
		'text' => false,
		'icon' => false,
		'isPositive' => false,
		'isShipping' => false,
		'productCategoryId' => false,
		'productManufacturerId' => false,
		'productName' => false,
		'ean' => true,
		'buildProducts' => true,
		'relatedProducts' => true,
		'setProducts' => true,
		'weight' => false,
		'width' => false,
		'innerDiameter' => false,
		'outerDiameter' => false,
		'searchText1' => true,
		'searchText2' => true,
		'searchText3' => true,
		'customsTariffNumber' => false,
		'attributes' => false,
		'price' => false,
		'lineartech' => false,
		'image' => false,
		'quantity' => false,
		'productId' => false,
		'productPrice' => false,
		'listPrice' => false,
		'fictiveListPrice' => false,
		'occasionPrice' => false,
		'selectionPrice' => false,
		'lastYearPrice' => false,
		'currency' => false,
		'filename' => false,
		'base64' => false,
		'lengthOriginal' => false,
		'lengthInStock' => false,
		'lengthLeft' => false,
		'lengthRight' => false,
		'keyId' => false,
		'key' => false,
		'valueId' => false,
		'value' => false,
		'customersCustomerId' => false,
		'carrierId' => false,
		'orderNo' => false,
		'currentStatusId' => false,
		'isPDFDelivered' => false,
		'paymentMethod' => true,
		'totalShippingCosts' => true,
		'totalPaid' => true,
		'comment' => true,
		'deliveryNote' => true,
		'reference' => true,
		'discountName' => true,
		'discountCode' => true,
		'discountValue' => true,
		'sentToDatahub' => true,
		'positions' => false,
		'invoice' => false,
		'invoiceAddress' => false,
		'deliveryAddress' => false,
		'statusHistories' => false,
		'orderId' => false,
		'orderStatuscodeId' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'shortISO' => 'shortISO',
        'languageName' => 'languageName',
        'isPublished' => 'isPublished',
        'createdAt' => 'created_at',
        'updatedAt' => 'updated_at',
        'parentProductCategoryId' => 'parent_product_category_id',
        'layer' => 'layer',
        'amountProducts' => 'amount_products',
        'categoryLang' => 'categoryLang',
        'subCategories' => 'subCategories',
        'shortName' => 'shortName',
        'fullName' => 'fullName',
        'deletedAt' => 'deleted_at',
        'shippingCode' => 'shippingCode',
        'shippingCompanyCode' => 'shippingCompanyCode',
        'shippingCompany' => 'shippingCompany',
        'shippingName' => 'shippingName',
        'shippingTime' => 'shippingTime',
        'shippingTimeFriday' => 'shippingTimeFriday',
        'shippingWeight' => 'shippingWeight',
        'shippingLength' => 'shippingLength',
        'languageId' => 'language_id',
        'text' => 'text',
        'icon' => 'icon',
        'isPositive' => 'isPositive',
        'isShipping' => 'isShipping',
        'productCategoryId' => 'product_category_id',
        'productManufacturerId' => 'product_manufacturer_id',
        'productName' => 'productName',
        'ean' => 'ean',
        'buildProducts' => 'buildProducts',
        'relatedProducts' => 'relatedProducts',
        'setProducts' => 'setProducts',
        'weight' => 'weight',
        'width' => 'width',
        'innerDiameter' => 'innerDiameter',
        'outerDiameter' => 'outerDiameter',
        'searchText1' => 'searchText1',
        'searchText2' => 'searchText2',
        'searchText3' => 'searchText3',
        'customsTariffNumber' => 'customsTariffNumber',
        'attributes' => 'attributes',
        'price' => 'price',
        'lineartech' => 'lineartech',
        'image' => 'image',
        'quantity' => 'quantity',
        'productId' => 'product_id',
        'productPrice' => 'productPrice',
        'listPrice' => 'listPrice',
        'fictiveListPrice' => 'fictiveListPrice',
        'occasionPrice' => 'occasionPrice',
        'selectionPrice' => 'selectionPrice',
        'lastYearPrice' => 'lastYearPrice',
        'currency' => 'currency',
        'filename' => 'filename',
        'base64' => 'base64',
        'lengthOriginal' => 'lengthOriginal',
        'lengthInStock' => 'lengthInStock',
        'lengthLeft' => 'lengthLeft',
        'lengthRight' => 'lengthRight',
        'keyId' => 'key_id',
        'key' => 'key',
        'valueId' => 'value_id',
        'value' => 'value',
        'customersCustomerId' => 'customers_customer_id',
        'carrierId' => 'carrier_id',
        'orderNo' => 'orderNo',
        'currentStatusId' => 'current_status_id',
        'isPDFDelivered' => 'isPDFDelivered',
        'paymentMethod' => 'paymentMethod',
        'totalShippingCosts' => 'totalShippingCosts',
        'totalPaid' => 'totalPaid',
        'comment' => 'comment',
        'deliveryNote' => 'deliveryNote',
        'reference' => 'reference',
        'discountName' => 'discountName',
        'discountCode' => 'discountCode',
        'discountValue' => 'discountValue',
        'sentToDatahub' => 'sentToDatahub',
        'positions' => 'positions',
        'invoice' => 'invoice',
        'invoiceAddress' => 'invoiceAddress',
        'deliveryAddress' => 'deliveryAddress',
        'statusHistories' => 'status_histories',
        'orderId' => 'order_id',
        'orderStatuscodeId' => 'order_statuscode_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'shortISO' => 'setShortISO',
        'languageName' => 'setLanguageName',
        'isPublished' => 'setIsPublished',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'parentProductCategoryId' => 'setParentProductCategoryId',
        'layer' => 'setLayer',
        'amountProducts' => 'setAmountProducts',
        'categoryLang' => 'setCategoryLang',
        'subCategories' => 'setSubCategories',
        'shortName' => 'setShortName',
        'fullName' => 'setFullName',
        'deletedAt' => 'setDeletedAt',
        'shippingCode' => 'setShippingCode',
        'shippingCompanyCode' => 'setShippingCompanyCode',
        'shippingCompany' => 'setShippingCompany',
        'shippingName' => 'setShippingName',
        'shippingTime' => 'setShippingTime',
        'shippingTimeFriday' => 'setShippingTimeFriday',
        'shippingWeight' => 'setShippingWeight',
        'shippingLength' => 'setShippingLength',
        'languageId' => 'setLanguageId',
        'text' => 'setText',
        'icon' => 'setIcon',
        'isPositive' => 'setIsPositive',
        'isShipping' => 'setIsShipping',
        'productCategoryId' => 'setProductCategoryId',
        'productManufacturerId' => 'setProductManufacturerId',
        'productName' => 'setProductName',
        'ean' => 'setEan',
        'buildProducts' => 'setBuildProducts',
        'relatedProducts' => 'setRelatedProducts',
        'setProducts' => 'setSetProducts',
        'weight' => 'setWeight',
        'width' => 'setWidth',
        'innerDiameter' => 'setInnerDiameter',
        'outerDiameter' => 'setOuterDiameter',
        'searchText1' => 'setSearchText1',
        'searchText2' => 'setSearchText2',
        'searchText3' => 'setSearchText3',
        'customsTariffNumber' => 'setCustomsTariffNumber',
        'attributes' => 'setAttributes',
        'price' => 'setPrice',
        'lineartech' => 'setLineartech',
        'image' => 'setImage',
        'quantity' => 'setQuantity',
        'productId' => 'setProductId',
        'productPrice' => 'setProductPrice',
        'listPrice' => 'setListPrice',
        'fictiveListPrice' => 'setFictiveListPrice',
        'occasionPrice' => 'setOccasionPrice',
        'selectionPrice' => 'setSelectionPrice',
        'lastYearPrice' => 'setLastYearPrice',
        'currency' => 'setCurrency',
        'filename' => 'setFilename',
        'base64' => 'setBase64',
        'lengthOriginal' => 'setLengthOriginal',
        'lengthInStock' => 'setLengthInStock',
        'lengthLeft' => 'setLengthLeft',
        'lengthRight' => 'setLengthRight',
        'keyId' => 'setKeyId',
        'key' => 'setKey',
        'valueId' => 'setValueId',
        'value' => 'setValue',
        'customersCustomerId' => 'setCustomersCustomerId',
        'carrierId' => 'setCarrierId',
        'orderNo' => 'setOrderNo',
        'currentStatusId' => 'setCurrentStatusId',
        'isPDFDelivered' => 'setIsPDFDelivered',
        'paymentMethod' => 'setPaymentMethod',
        'totalShippingCosts' => 'setTotalShippingCosts',
        'totalPaid' => 'setTotalPaid',
        'comment' => 'setComment',
        'deliveryNote' => 'setDeliveryNote',
        'reference' => 'setReference',
        'discountName' => 'setDiscountName',
        'discountCode' => 'setDiscountCode',
        'discountValue' => 'setDiscountValue',
        'sentToDatahub' => 'setSentToDatahub',
        'positions' => 'setPositions',
        'invoice' => 'setInvoice',
        'invoiceAddress' => 'setInvoiceAddress',
        'deliveryAddress' => 'setDeliveryAddress',
        'statusHistories' => 'setStatusHistories',
        'orderId' => 'setOrderId',
        'orderStatuscodeId' => 'setOrderStatuscodeId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'shortISO' => 'getShortISO',
        'languageName' => 'getLanguageName',
        'isPublished' => 'getIsPublished',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'parentProductCategoryId' => 'getParentProductCategoryId',
        'layer' => 'getLayer',
        'amountProducts' => 'getAmountProducts',
        'categoryLang' => 'getCategoryLang',
        'subCategories' => 'getSubCategories',
        'shortName' => 'getShortName',
        'fullName' => 'getFullName',
        'deletedAt' => 'getDeletedAt',
        'shippingCode' => 'getShippingCode',
        'shippingCompanyCode' => 'getShippingCompanyCode',
        'shippingCompany' => 'getShippingCompany',
        'shippingName' => 'getShippingName',
        'shippingTime' => 'getShippingTime',
        'shippingTimeFriday' => 'getShippingTimeFriday',
        'shippingWeight' => 'getShippingWeight',
        'shippingLength' => 'getShippingLength',
        'languageId' => 'getLanguageId',
        'text' => 'getText',
        'icon' => 'getIcon',
        'isPositive' => 'getIsPositive',
        'isShipping' => 'getIsShipping',
        'productCategoryId' => 'getProductCategoryId',
        'productManufacturerId' => 'getProductManufacturerId',
        'productName' => 'getProductName',
        'ean' => 'getEan',
        'buildProducts' => 'getBuildProducts',
        'relatedProducts' => 'getRelatedProducts',
        'setProducts' => 'getSetProducts',
        'weight' => 'getWeight',
        'width' => 'getWidth',
        'innerDiameter' => 'getInnerDiameter',
        'outerDiameter' => 'getOuterDiameter',
        'searchText1' => 'getSearchText1',
        'searchText2' => 'getSearchText2',
        'searchText3' => 'getSearchText3',
        'customsTariffNumber' => 'getCustomsTariffNumber',
        'attributes' => 'getAttributes',
        'price' => 'getPrice',
        'lineartech' => 'getLineartech',
        'image' => 'getImage',
        'quantity' => 'getQuantity',
        'productId' => 'getProductId',
        'productPrice' => 'getProductPrice',
        'listPrice' => 'getListPrice',
        'fictiveListPrice' => 'getFictiveListPrice',
        'occasionPrice' => 'getOccasionPrice',
        'selectionPrice' => 'getSelectionPrice',
        'lastYearPrice' => 'getLastYearPrice',
        'currency' => 'getCurrency',
        'filename' => 'getFilename',
        'base64' => 'getBase64',
        'lengthOriginal' => 'getLengthOriginal',
        'lengthInStock' => 'getLengthInStock',
        'lengthLeft' => 'getLengthLeft',
        'lengthRight' => 'getLengthRight',
        'keyId' => 'getKeyId',
        'key' => 'getKey',
        'valueId' => 'getValueId',
        'value' => 'getValue',
        'customersCustomerId' => 'getCustomersCustomerId',
        'carrierId' => 'getCarrierId',
        'orderNo' => 'getOrderNo',
        'currentStatusId' => 'getCurrentStatusId',
        'isPDFDelivered' => 'getIsPDFDelivered',
        'paymentMethod' => 'getPaymentMethod',
        'totalShippingCosts' => 'getTotalShippingCosts',
        'totalPaid' => 'getTotalPaid',
        'comment' => 'getComment',
        'deliveryNote' => 'getDeliveryNote',
        'reference' => 'getReference',
        'discountName' => 'getDiscountName',
        'discountCode' => 'getDiscountCode',
        'discountValue' => 'getDiscountValue',
        'sentToDatahub' => 'getSentToDatahub',
        'positions' => 'getPositions',
        'invoice' => 'getInvoice',
        'invoiceAddress' => 'getInvoiceAddress',
        'deliveryAddress' => 'getDeliveryAddress',
        'statusHistories' => 'getStatusHistories',
        'orderId' => 'getOrderId',
        'orderStatuscodeId' => 'getOrderStatuscodeId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('shortISO', $data ?? [], null);
        $this->setIfExists('languageName', $data ?? [], null);
        $this->setIfExists('isPublished', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('parentProductCategoryId', $data ?? [], null);
        $this->setIfExists('layer', $data ?? [], null);
        $this->setIfExists('amountProducts', $data ?? [], null);
        $this->setIfExists('categoryLang', $data ?? [], null);
        $this->setIfExists('subCategories', $data ?? [], null);
        $this->setIfExists('shortName', $data ?? [], null);
        $this->setIfExists('fullName', $data ?? [], null);
        $this->setIfExists('deletedAt', $data ?? [], null);
        $this->setIfExists('shippingCode', $data ?? [], null);
        $this->setIfExists('shippingCompanyCode', $data ?? [], null);
        $this->setIfExists('shippingCompany', $data ?? [], null);
        $this->setIfExists('shippingName', $data ?? [], null);
        $this->setIfExists('shippingTime', $data ?? [], null);
        $this->setIfExists('shippingTimeFriday', $data ?? [], null);
        $this->setIfExists('shippingWeight', $data ?? [], null);
        $this->setIfExists('shippingLength', $data ?? [], null);
        $this->setIfExists('languageId', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('icon', $data ?? [], null);
        $this->setIfExists('isPositive', $data ?? [], null);
        $this->setIfExists('isShipping', $data ?? [], null);
        $this->setIfExists('productCategoryId', $data ?? [], null);
        $this->setIfExists('productManufacturerId', $data ?? [], null);
        $this->setIfExists('productName', $data ?? [], null);
        $this->setIfExists('ean', $data ?? [], null);
        $this->setIfExists('buildProducts', $data ?? [], null);
        $this->setIfExists('relatedProducts', $data ?? [], null);
        $this->setIfExists('setProducts', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('width', $data ?? [], null);
        $this->setIfExists('innerDiameter', $data ?? [], null);
        $this->setIfExists('outerDiameter', $data ?? [], null);
        $this->setIfExists('searchText1', $data ?? [], null);
        $this->setIfExists('searchText2', $data ?? [], null);
        $this->setIfExists('searchText3', $data ?? [], null);
        $this->setIfExists('customsTariffNumber', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('lineartech', $data ?? [], null);
        $this->setIfExists('image', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('productId', $data ?? [], null);
        $this->setIfExists('productPrice', $data ?? [], null);
        $this->setIfExists('listPrice', $data ?? [], null);
        $this->setIfExists('fictiveListPrice', $data ?? [], null);
        $this->setIfExists('occasionPrice', $data ?? [], null);
        $this->setIfExists('selectionPrice', $data ?? [], null);
        $this->setIfExists('lastYearPrice', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('filename', $data ?? [], null);
        $this->setIfExists('base64', $data ?? [], null);
        $this->setIfExists('lengthOriginal', $data ?? [], null);
        $this->setIfExists('lengthInStock', $data ?? [], null);
        $this->setIfExists('lengthLeft', $data ?? [], null);
        $this->setIfExists('lengthRight', $data ?? [], null);
        $this->setIfExists('keyId', $data ?? [], null);
        $this->setIfExists('key', $data ?? [], null);
        $this->setIfExists('valueId', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('customersCustomerId', $data ?? [], null);
        $this->setIfExists('carrierId', $data ?? [], null);
        $this->setIfExists('orderNo', $data ?? [], null);
        $this->setIfExists('currentStatusId', $data ?? [], null);
        $this->setIfExists('isPDFDelivered', $data ?? [], null);
        $this->setIfExists('paymentMethod', $data ?? [], null);
        $this->setIfExists('totalShippingCosts', $data ?? [], null);
        $this->setIfExists('totalPaid', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('deliveryNote', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('discountName', $data ?? [], null);
        $this->setIfExists('discountCode', $data ?? [], null);
        $this->setIfExists('discountValue', $data ?? [], null);
        $this->setIfExists('sentToDatahub', $data ?? [], null);
        $this->setIfExists('positions', $data ?? [], null);
        $this->setIfExists('invoice', $data ?? [], null);
        $this->setIfExists('invoiceAddress', $data ?? [], null);
        $this->setIfExists('deliveryAddress', $data ?? [], null);
        $this->setIfExists('statusHistories', $data ?? [], null);
        $this->setIfExists('orderId', $data ?? [], null);
        $this->setIfExists('orderStatuscodeId', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['shortISO']) && !preg_match("/^[A-Z]{2}$/", $this->container['shortISO'])) {
            $invalidProperties[] = "invalid value for 'shortISO', must be conform to the pattern /^[A-Z]{2}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets shortISO
     *
     * @return string|null
     */
    public function getShortISO()
    {
        return $this->container['shortISO'];
    }

    /**
     * Sets shortISO
     *
     * @param string|null $shortISO shortISO
     *
     * @return self
     */
    public function setShortISO($shortISO)
    {
        if (is_null($shortISO)) {
            throw new \InvalidArgumentException('non-nullable shortISO cannot be null');
        }

        if ((!preg_match("/^[A-Z]{2}$/", $shortISO))) {
            throw new \InvalidArgumentException("invalid value for \$shortISO when calling SuccessResponseData., must conform to the pattern /^[A-Z]{2}$/.");
        }

        $this->container['shortISO'] = $shortISO;

        return $this;
    }

    /**
     * Gets languageName
     *
     * @return string|null
     */
    public function getLanguageName()
    {
        return $this->container['languageName'];
    }

    /**
     * Sets languageName
     *
     * @param string|null $languageName languageName
     *
     * @return self
     */
    public function setLanguageName($languageName)
    {
        if (is_null($languageName)) {
            throw new \InvalidArgumentException('non-nullable languageName cannot be null');
        }
        $this->container['languageName'] = $languageName;

        return $this;
    }

    /**
     * Gets isPublished
     *
     * @return bool|null
     */
    public function getIsPublished()
    {
        return $this->container['isPublished'];
    }

    /**
     * Sets isPublished
     *
     * @param bool|null $isPublished isPublished
     *
     * @return self
     */
    public function setIsPublished($isPublished)
    {
        if (is_null($isPublished)) {
            throw new \InvalidArgumentException('non-nullable isPublished cannot be null');
        }
        $this->container['isPublished'] = $isPublished;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt updatedAt
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            array_push($this->openAPINullablesSetToNull, 'updatedAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updatedAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets parentProductCategoryId
     *
     * @return int|null
     */
    public function getParentProductCategoryId()
    {
        return $this->container['parentProductCategoryId'];
    }

    /**
     * Sets parentProductCategoryId
     *
     * @param int|null $parentProductCategoryId parentProductCategoryId
     *
     * @return self
     */
    public function setParentProductCategoryId($parentProductCategoryId)
    {
        if (is_null($parentProductCategoryId)) {
            array_push($this->openAPINullablesSetToNull, 'parentProductCategoryId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parentProductCategoryId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parentProductCategoryId'] = $parentProductCategoryId;

        return $this;
    }

    /**
     * Gets layer
     *
     * @return int|null
     */
    public function getLayer()
    {
        return $this->container['layer'];
    }

    /**
     * Sets layer
     *
     * @param int|null $layer layer
     *
     * @return self
     */
    public function setLayer($layer)
    {
        if (is_null($layer)) {
            throw new \InvalidArgumentException('non-nullable layer cannot be null');
        }
        $this->container['layer'] = $layer;

        return $this;
    }

    /**
     * Gets amountProducts
     *
     * @return int|null
     */
    public function getAmountProducts()
    {
        return $this->container['amountProducts'];
    }

    /**
     * Sets amountProducts
     *
     * @param int|null $amountProducts amountProducts
     *
     * @return self
     */
    public function setAmountProducts($amountProducts)
    {
        if (is_null($amountProducts)) {
            throw new \InvalidArgumentException('non-nullable amountProducts cannot be null');
        }
        $this->container['amountProducts'] = $amountProducts;

        return $this;
    }

    /**
     * Gets categoryLang
     *
     * @return \RtgConnector\RtgConnectBundle\Model\CategoryCategoryLangInner[]|null
     */
    public function getCategoryLang()
    {
        return $this->container['categoryLang'];
    }

    /**
     * Sets categoryLang
     *
     * @param \RtgConnector\RtgConnectBundle\Model\CategoryCategoryLangInner[]|null $categoryLang categoryLang
     *
     * @return self
     */
    public function setCategoryLang($categoryLang)
    {
        if (is_null($categoryLang)) {
            throw new \InvalidArgumentException('non-nullable categoryLang cannot be null');
        }
        $this->container['categoryLang'] = $categoryLang;

        return $this;
    }

    /**
     * Gets subCategories
     *
     * @return \RtgConnector\RtgConnectBundle\Model\CategorySubCategoriesInner[]|null
     */
    public function getSubCategories()
    {
        return $this->container['subCategories'];
    }

    /**
     * Sets subCategories
     *
     * @param \RtgConnector\RtgConnectBundle\Model\CategorySubCategoriesInner[]|null $subCategories subCategories
     *
     * @return self
     */
    public function setSubCategories($subCategories)
    {
        if (is_null($subCategories)) {
            throw new \InvalidArgumentException('non-nullable subCategories cannot be null');
        }
        $this->container['subCategories'] = $subCategories;

        return $this;
    }

    /**
     * Gets shortName
     *
     * @return string|null
     */
    public function getShortName()
    {
        return $this->container['shortName'];
    }

    /**
     * Sets shortName
     *
     * @param string|null $shortName shortName
     *
     * @return self
     */
    public function setShortName($shortName)
    {
        if (is_null($shortName)) {
            throw new \InvalidArgumentException('non-nullable shortName cannot be null');
        }
        $this->container['shortName'] = $shortName;

        return $this;
    }

    /**
     * Gets fullName
     *
     * @return string|null
     */
    public function getFullName()
    {
        return $this->container['fullName'];
    }

    /**
     * Sets fullName
     *
     * @param string|null $fullName fullName
     *
     * @return self
     */
    public function setFullName($fullName)
    {
        if (is_null($fullName)) {
            throw new \InvalidArgumentException('non-nullable fullName cannot be null');
        }
        $this->container['fullName'] = $fullName;

        return $this;
    }

    /**
     * Gets deletedAt
     *
     * @return \DateTime|null
     */
    public function getDeletedAt()
    {
        return $this->container['deletedAt'];
    }

    /**
     * Sets deletedAt
     *
     * @param \DateTime|null $deletedAt deletedAt
     *
     * @return self
     */
    public function setDeletedAt($deletedAt)
    {
        if (is_null($deletedAt)) {
            array_push($this->openAPINullablesSetToNull, 'deletedAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deletedAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deletedAt'] = $deletedAt;

        return $this;
    }

    /**
     * Gets shippingCode
     *
     * @return string|null
     */
    public function getShippingCode()
    {
        return $this->container['shippingCode'];
    }

    /**
     * Sets shippingCode
     *
     * @param string|null $shippingCode shippingCode
     *
     * @return self
     */
    public function setShippingCode($shippingCode)
    {
        if (is_null($shippingCode)) {
            throw new \InvalidArgumentException('non-nullable shippingCode cannot be null');
        }
        $this->container['shippingCode'] = $shippingCode;

        return $this;
    }

    /**
     * Gets shippingCompanyCode
     *
     * @return string|null
     */
    public function getShippingCompanyCode()
    {
        return $this->container['shippingCompanyCode'];
    }

    /**
     * Sets shippingCompanyCode
     *
     * @param string|null $shippingCompanyCode shippingCompanyCode
     *
     * @return self
     */
    public function setShippingCompanyCode($shippingCompanyCode)
    {
        if (is_null($shippingCompanyCode)) {
            throw new \InvalidArgumentException('non-nullable shippingCompanyCode cannot be null');
        }
        $this->container['shippingCompanyCode'] = $shippingCompanyCode;

        return $this;
    }

    /**
     * Gets shippingCompany
     *
     * @return string|null
     */
    public function getShippingCompany()
    {
        return $this->container['shippingCompany'];
    }

    /**
     * Sets shippingCompany
     *
     * @param string|null $shippingCompany shippingCompany
     *
     * @return self
     */
    public function setShippingCompany($shippingCompany)
    {
        if (is_null($shippingCompany)) {
            throw new \InvalidArgumentException('non-nullable shippingCompany cannot be null');
        }
        $this->container['shippingCompany'] = $shippingCompany;

        return $this;
    }

    /**
     * Gets shippingName
     *
     * @return string|null
     */
    public function getShippingName()
    {
        return $this->container['shippingName'];
    }

    /**
     * Sets shippingName
     *
     * @param string|null $shippingName shippingName
     *
     * @return self
     */
    public function setShippingName($shippingName)
    {
        if (is_null($shippingName)) {
            throw new \InvalidArgumentException('non-nullable shippingName cannot be null');
        }
        $this->container['shippingName'] = $shippingName;

        return $this;
    }

    /**
     * Gets shippingTime
     *
     * @return string|null
     */
    public function getShippingTime()
    {
        return $this->container['shippingTime'];
    }

    /**
     * Sets shippingTime
     *
     * @param string|null $shippingTime shippingTime
     *
     * @return self
     */
    public function setShippingTime($shippingTime)
    {
        if (is_null($shippingTime)) {
            throw new \InvalidArgumentException('non-nullable shippingTime cannot be null');
        }
        $this->container['shippingTime'] = $shippingTime;

        return $this;
    }

    /**
     * Gets shippingTimeFriday
     *
     * @return string|null
     */
    public function getShippingTimeFriday()
    {
        return $this->container['shippingTimeFriday'];
    }

    /**
     * Sets shippingTimeFriday
     *
     * @param string|null $shippingTimeFriday shippingTimeFriday
     *
     * @return self
     */
    public function setShippingTimeFriday($shippingTimeFriday)
    {
        if (is_null($shippingTimeFriday)) {
            throw new \InvalidArgumentException('non-nullable shippingTimeFriday cannot be null');
        }
        $this->container['shippingTimeFriday'] = $shippingTimeFriday;

        return $this;
    }

    /**
     * Gets shippingWeight
     *
     * @return float|null
     */
    public function getShippingWeight()
    {
        return $this->container['shippingWeight'];
    }

    /**
     * Sets shippingWeight
     *
     * @param float|null $shippingWeight shippingWeight
     *
     * @return self
     */
    public function setShippingWeight($shippingWeight)
    {
        if (is_null($shippingWeight)) {
            throw new \InvalidArgumentException('non-nullable shippingWeight cannot be null');
        }
        $this->container['shippingWeight'] = $shippingWeight;

        return $this;
    }

    /**
     * Gets shippingLength
     *
     * @return int|null
     */
    public function getShippingLength()
    {
        return $this->container['shippingLength'];
    }

    /**
     * Sets shippingLength
     *
     * @param int|null $shippingLength shippingLength
     *
     * @return self
     */
    public function setShippingLength($shippingLength)
    {
        if (is_null($shippingLength)) {
            throw new \InvalidArgumentException('non-nullable shippingLength cannot be null');
        }
        $this->container['shippingLength'] = $shippingLength;

        return $this;
    }

    /**
     * Gets languageId
     *
     * @return int|null
     */
    public function getLanguageId()
    {
        return $this->container['languageId'];
    }

    /**
     * Sets languageId
     *
     * @param int|null $languageId languageId
     *
     * @return self
     */
    public function setLanguageId($languageId)
    {
        if (is_null($languageId)) {
            throw new \InvalidArgumentException('non-nullable languageId cannot be null');
        }
        $this->container['languageId'] = $languageId;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text text
     *
     * @return self
     */
    public function setText($text)
    {
        if (is_null($text)) {
            throw new \InvalidArgumentException('non-nullable text cannot be null');
        }
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return string|null
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string|null $icon icon
     *
     * @return self
     */
    public function setIcon($icon)
    {
        if (is_null($icon)) {
            throw new \InvalidArgumentException('non-nullable icon cannot be null');
        }
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets isPositive
     *
     * @return bool|null
     */
    public function getIsPositive()
    {
        return $this->container['isPositive'];
    }

    /**
     * Sets isPositive
     *
     * @param bool|null $isPositive isPositive
     *
     * @return self
     */
    public function setIsPositive($isPositive)
    {
        if (is_null($isPositive)) {
            throw new \InvalidArgumentException('non-nullable isPositive cannot be null');
        }
        $this->container['isPositive'] = $isPositive;

        return $this;
    }

    /**
     * Gets isShipping
     *
     * @return bool|null
     */
    public function getIsShipping()
    {
        return $this->container['isShipping'];
    }

    /**
     * Sets isShipping
     *
     * @param bool|null $isShipping isShipping
     *
     * @return self
     */
    public function setIsShipping($isShipping)
    {
        if (is_null($isShipping)) {
            throw new \InvalidArgumentException('non-nullable isShipping cannot be null');
        }
        $this->container['isShipping'] = $isShipping;

        return $this;
    }

    /**
     * Gets productCategoryId
     *
     * @return int|null
     */
    public function getProductCategoryId()
    {
        return $this->container['productCategoryId'];
    }

    /**
     * Sets productCategoryId
     *
     * @param int|null $productCategoryId productCategoryId
     *
     * @return self
     */
    public function setProductCategoryId($productCategoryId)
    {
        if (is_null($productCategoryId)) {
            throw new \InvalidArgumentException('non-nullable productCategoryId cannot be null');
        }
        $this->container['productCategoryId'] = $productCategoryId;

        return $this;
    }

    /**
     * Gets productManufacturerId
     *
     * @return int|null
     */
    public function getProductManufacturerId()
    {
        return $this->container['productManufacturerId'];
    }

    /**
     * Sets productManufacturerId
     *
     * @param int|null $productManufacturerId productManufacturerId
     *
     * @return self
     */
    public function setProductManufacturerId($productManufacturerId)
    {
        if (is_null($productManufacturerId)) {
            throw new \InvalidArgumentException('non-nullable productManufacturerId cannot be null');
        }
        $this->container['productManufacturerId'] = $productManufacturerId;

        return $this;
    }

    /**
     * Gets productName
     *
     * @return string|null
     */
    public function getProductName()
    {
        return $this->container['productName'];
    }

    /**
     * Sets productName
     *
     * @param string|null $productName productName
     *
     * @return self
     */
    public function setProductName($productName)
    {
        if (is_null($productName)) {
            throw new \InvalidArgumentException('non-nullable productName cannot be null');
        }
        $this->container['productName'] = $productName;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return int[]|null
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param int[]|null $ean ean
     *
     * @return self
     */
    public function setEan($ean)
    {
        if (is_null($ean)) {
            array_push($this->openAPINullablesSetToNull, 'ean');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ean', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets buildProducts
     *
     * @return \RtgConnector\RtgConnectBundle\Model\ProductDataBuildProducts[]|null
     */
    public function getBuildProducts()
    {
        return $this->container['buildProducts'];
    }

    /**
     * Sets buildProducts
     *
     * @param \RtgConnector\RtgConnectBundle\Model\ProductDataBuildProducts[]|null $buildProducts buildProducts
     *
     * @return self
     */
    public function setBuildProducts($buildProducts)
    {
        if (is_null($buildProducts)) {
            array_push($this->openAPINullablesSetToNull, 'buildProducts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buildProducts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buildProducts'] = $buildProducts;

        return $this;
    }

    /**
     * Gets relatedProducts
     *
     * @return \RtgConnector\RtgConnectBundle\Model\ProductDataRelatedProducts[]|null
     */
    public function getRelatedProducts()
    {
        return $this->container['relatedProducts'];
    }

    /**
     * Sets relatedProducts
     *
     * @param \RtgConnector\RtgConnectBundle\Model\ProductDataRelatedProducts[]|null $relatedProducts relatedProducts
     *
     * @return self
     */
    public function setRelatedProducts($relatedProducts)
    {
        if (is_null($relatedProducts)) {
            array_push($this->openAPINullablesSetToNull, 'relatedProducts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('relatedProducts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['relatedProducts'] = $relatedProducts;

        return $this;
    }

    /**
     * Gets setProducts
     *
     * @return \RtgConnector\RtgConnectBundle\Model\ProductDataSetProducts[]|null
     */
    public function getSetProducts()
    {
        return $this->container['setProducts'];
    }

    /**
     * Sets setProducts
     *
     * @param \RtgConnector\RtgConnectBundle\Model\ProductDataSetProducts[]|null $setProducts setProducts
     *
     * @return self
     */
    public function setSetProducts($setProducts)
    {
        if (is_null($setProducts)) {
            array_push($this->openAPINullablesSetToNull, 'setProducts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('setProducts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['setProducts'] = $setProducts;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets width
     *
     * @return float|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param float|null $width width
     *
     * @return self
     */
    public function setWidth($width)
    {
        if (is_null($width)) {
            throw new \InvalidArgumentException('non-nullable width cannot be null');
        }
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets innerDiameter
     *
     * @return float|null
     */
    public function getInnerDiameter()
    {
        return $this->container['innerDiameter'];
    }

    /**
     * Sets innerDiameter
     *
     * @param float|null $innerDiameter innerDiameter
     *
     * @return self
     */
    public function setInnerDiameter($innerDiameter)
    {
        if (is_null($innerDiameter)) {
            throw new \InvalidArgumentException('non-nullable innerDiameter cannot be null');
        }
        $this->container['innerDiameter'] = $innerDiameter;

        return $this;
    }

    /**
     * Gets outerDiameter
     *
     * @return float|null
     */
    public function getOuterDiameter()
    {
        return $this->container['outerDiameter'];
    }

    /**
     * Sets outerDiameter
     *
     * @param float|null $outerDiameter outerDiameter
     *
     * @return self
     */
    public function setOuterDiameter($outerDiameter)
    {
        if (is_null($outerDiameter)) {
            throw new \InvalidArgumentException('non-nullable outerDiameter cannot be null');
        }
        $this->container['outerDiameter'] = $outerDiameter;

        return $this;
    }

    /**
     * Gets searchText1
     *
     * @return string|null
     */
    public function getSearchText1()
    {
        return $this->container['searchText1'];
    }

    /**
     * Sets searchText1
     *
     * @param string|null $searchText1 searchText1
     *
     * @return self
     */
    public function setSearchText1($searchText1)
    {
        if (is_null($searchText1)) {
            array_push($this->openAPINullablesSetToNull, 'searchText1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('searchText1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['searchText1'] = $searchText1;

        return $this;
    }

    /**
     * Gets searchText2
     *
     * @return string|null
     */
    public function getSearchText2()
    {
        return $this->container['searchText2'];
    }

    /**
     * Sets searchText2
     *
     * @param string|null $searchText2 searchText2
     *
     * @return self
     */
    public function setSearchText2($searchText2)
    {
        if (is_null($searchText2)) {
            array_push($this->openAPINullablesSetToNull, 'searchText2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('searchText2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['searchText2'] = $searchText2;

        return $this;
    }

    /**
     * Gets searchText3
     *
     * @return string|null
     */
    public function getSearchText3()
    {
        return $this->container['searchText3'];
    }

    /**
     * Sets searchText3
     *
     * @param string|null $searchText3 searchText3
     *
     * @return self
     */
    public function setSearchText3($searchText3)
    {
        if (is_null($searchText3)) {
            array_push($this->openAPINullablesSetToNull, 'searchText3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('searchText3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['searchText3'] = $searchText3;

        return $this;
    }

    /**
     * Gets customsTariffNumber
     *
     * @return int|null
     */
    public function getCustomsTariffNumber()
    {
        return $this->container['customsTariffNumber'];
    }

    /**
     * Sets customsTariffNumber
     *
     * @param int|null $customsTariffNumber customsTariffNumber
     *
     * @return self
     */
    public function setCustomsTariffNumber($customsTariffNumber)
    {
        if (is_null($customsTariffNumber)) {
            throw new \InvalidArgumentException('non-nullable customsTariffNumber cannot be null');
        }
        $this->container['customsTariffNumber'] = $customsTariffNumber;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \RtgConnector\RtgConnectBundle\Model\ProductAttribute[]|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \RtgConnector\RtgConnectBundle\Model\ProductAttribute[]|null $attributes attributes
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        if (is_null($attributes)) {
            throw new \InvalidArgumentException('non-nullable attributes cannot be null');
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \RtgConnector\RtgConnectBundle\Model\ProductDataPrice|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \RtgConnector\RtgConnectBundle\Model\ProductDataPrice|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets lineartech
     *
     * @return \RtgConnector\RtgConnectBundle\Model\ProductDataLineartech|null
     */
    public function getLineartech()
    {
        return $this->container['lineartech'];
    }

    /**
     * Sets lineartech
     *
     * @param \RtgConnector\RtgConnectBundle\Model\ProductDataLineartech|null $lineartech lineartech
     *
     * @return self
     */
    public function setLineartech($lineartech)
    {
        if (is_null($lineartech)) {
            throw new \InvalidArgumentException('non-nullable lineartech cannot be null');
        }
        $this->container['lineartech'] = $lineartech;

        return $this;
    }

    /**
     * Gets image
     *
     * @return \RtgConnector\RtgConnectBundle\Model\ProductDataImage|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param \RtgConnector\RtgConnectBundle\Model\ProductDataImage|null $image image
     *
     * @return self
     */
    public function setImage($image)
    {
        if (is_null($image)) {
            throw new \InvalidArgumentException('non-nullable image cannot be null');
        }
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets productId
     *
     * @return int|null
     */
    public function getProductId()
    {
        return $this->container['productId'];
    }

    /**
     * Sets productId
     *
     * @param int|null $productId productId
     *
     * @return self
     */
    public function setProductId($productId)
    {
        if (is_null($productId)) {
            throw new \InvalidArgumentException('non-nullable productId cannot be null');
        }
        $this->container['productId'] = $productId;

        return $this;
    }

    /**
     * Gets productPrice
     *
     * @return float|null
     */
    public function getProductPrice()
    {
        return $this->container['productPrice'];
    }

    /**
     * Sets productPrice
     *
     * @param float|null $productPrice productPrice
     *
     * @return self
     */
    public function setProductPrice($productPrice)
    {
        if (is_null($productPrice)) {
            throw new \InvalidArgumentException('non-nullable productPrice cannot be null');
        }
        $this->container['productPrice'] = $productPrice;

        return $this;
    }

    /**
     * Gets listPrice
     *
     * @return float|null
     */
    public function getListPrice()
    {
        return $this->container['listPrice'];
    }

    /**
     * Sets listPrice
     *
     * @param float|null $listPrice listPrice
     *
     * @return self
     */
    public function setListPrice($listPrice)
    {
        if (is_null($listPrice)) {
            throw new \InvalidArgumentException('non-nullable listPrice cannot be null');
        }
        $this->container['listPrice'] = $listPrice;

        return $this;
    }

    /**
     * Gets fictiveListPrice
     *
     * @return float|null
     */
    public function getFictiveListPrice()
    {
        return $this->container['fictiveListPrice'];
    }

    /**
     * Sets fictiveListPrice
     *
     * @param float|null $fictiveListPrice fictiveListPrice
     *
     * @return self
     */
    public function setFictiveListPrice($fictiveListPrice)
    {
        if (is_null($fictiveListPrice)) {
            throw new \InvalidArgumentException('non-nullable fictiveListPrice cannot be null');
        }
        $this->container['fictiveListPrice'] = $fictiveListPrice;

        return $this;
    }

    /**
     * Gets occasionPrice
     *
     * @return float|null
     */
    public function getOccasionPrice()
    {
        return $this->container['occasionPrice'];
    }

    /**
     * Sets occasionPrice
     *
     * @param float|null $occasionPrice occasionPrice
     *
     * @return self
     */
    public function setOccasionPrice($occasionPrice)
    {
        if (is_null($occasionPrice)) {
            throw new \InvalidArgumentException('non-nullable occasionPrice cannot be null');
        }
        $this->container['occasionPrice'] = $occasionPrice;

        return $this;
    }

    /**
     * Gets selectionPrice
     *
     * @return float|null
     */
    public function getSelectionPrice()
    {
        return $this->container['selectionPrice'];
    }

    /**
     * Sets selectionPrice
     *
     * @param float|null $selectionPrice selectionPrice
     *
     * @return self
     */
    public function setSelectionPrice($selectionPrice)
    {
        if (is_null($selectionPrice)) {
            throw new \InvalidArgumentException('non-nullable selectionPrice cannot be null');
        }
        $this->container['selectionPrice'] = $selectionPrice;

        return $this;
    }

    /**
     * Gets lastYearPrice
     *
     * @return float|null
     */
    public function getLastYearPrice()
    {
        return $this->container['lastYearPrice'];
    }

    /**
     * Sets lastYearPrice
     *
     * @param float|null $lastYearPrice lastYearPrice
     *
     * @return self
     */
    public function setLastYearPrice($lastYearPrice)
    {
        if (is_null($lastYearPrice)) {
            throw new \InvalidArgumentException('non-nullable lastYearPrice cannot be null');
        }
        $this->container['lastYearPrice'] = $lastYearPrice;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets filename
     *
     * @return string|null
     */
    public function getFilename()
    {
        return $this->container['filename'];
    }

    /**
     * Sets filename
     *
     * @param string|null $filename filename
     *
     * @return self
     */
    public function setFilename($filename)
    {
        if (is_null($filename)) {
            throw new \InvalidArgumentException('non-nullable filename cannot be null');
        }
        $this->container['filename'] = $filename;

        return $this;
    }

    /**
     * Gets base64
     *
     * @return string|null
     */
    public function getBase64()
    {
        return $this->container['base64'];
    }

    /**
     * Sets base64
     *
     * @param string|null $base64 base64
     *
     * @return self
     */
    public function setBase64($base64)
    {
        if (is_null($base64)) {
            throw new \InvalidArgumentException('non-nullable base64 cannot be null');
        }
        $this->container['base64'] = $base64;

        return $this;
    }

    /**
     * Gets lengthOriginal
     *
     * @return int|null
     */
    public function getLengthOriginal()
    {
        return $this->container['lengthOriginal'];
    }

    /**
     * Sets lengthOriginal
     *
     * @param int|null $lengthOriginal lengthOriginal
     *
     * @return self
     */
    public function setLengthOriginal($lengthOriginal)
    {
        if (is_null($lengthOriginal)) {
            throw new \InvalidArgumentException('non-nullable lengthOriginal cannot be null');
        }
        $this->container['lengthOriginal'] = $lengthOriginal;

        return $this;
    }

    /**
     * Gets lengthInStock
     *
     * @return int|null
     */
    public function getLengthInStock()
    {
        return $this->container['lengthInStock'];
    }

    /**
     * Sets lengthInStock
     *
     * @param int|null $lengthInStock lengthInStock
     *
     * @return self
     */
    public function setLengthInStock($lengthInStock)
    {
        if (is_null($lengthInStock)) {
            throw new \InvalidArgumentException('non-nullable lengthInStock cannot be null');
        }
        $this->container['lengthInStock'] = $lengthInStock;

        return $this;
    }

    /**
     * Gets lengthLeft
     *
     * @return int|null
     */
    public function getLengthLeft()
    {
        return $this->container['lengthLeft'];
    }

    /**
     * Sets lengthLeft
     *
     * @param int|null $lengthLeft lengthLeft
     *
     * @return self
     */
    public function setLengthLeft($lengthLeft)
    {
        if (is_null($lengthLeft)) {
            throw new \InvalidArgumentException('non-nullable lengthLeft cannot be null');
        }
        $this->container['lengthLeft'] = $lengthLeft;

        return $this;
    }

    /**
     * Gets lengthRight
     *
     * @return int|null
     */
    public function getLengthRight()
    {
        return $this->container['lengthRight'];
    }

    /**
     * Sets lengthRight
     *
     * @param int|null $lengthRight lengthRight
     *
     * @return self
     */
    public function setLengthRight($lengthRight)
    {
        if (is_null($lengthRight)) {
            throw new \InvalidArgumentException('non-nullable lengthRight cannot be null');
        }
        $this->container['lengthRight'] = $lengthRight;

        return $this;
    }

    /**
     * Gets keyId
     *
     * @return int|null
     */
    public function getKeyId()
    {
        return $this->container['keyId'];
    }

    /**
     * Sets keyId
     *
     * @param int|null $keyId keyId
     *
     * @return self
     */
    public function setKeyId($keyId)
    {
        if (is_null($keyId)) {
            throw new \InvalidArgumentException('non-nullable keyId cannot be null');
        }
        $this->container['keyId'] = $keyId;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key key
     *
     * @return self
     */
    public function setKey($key)
    {
        if (is_null($key)) {
            throw new \InvalidArgumentException('non-nullable key cannot be null');
        }
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets valueId
     *
     * @return int|null
     */
    public function getValueId()
    {
        return $this->container['valueId'];
    }

    /**
     * Sets valueId
     *
     * @param int|null $valueId valueId
     *
     * @return self
     */
    public function setValueId($valueId)
    {
        if (is_null($valueId)) {
            throw new \InvalidArgumentException('non-nullable valueId cannot be null');
        }
        $this->container['valueId'] = $valueId;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string|null $value value
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets customersCustomerId
     *
     * @return int|null
     */
    public function getCustomersCustomerId()
    {
        return $this->container['customersCustomerId'];
    }

    /**
     * Sets customersCustomerId
     *
     * @param int|null $customersCustomerId customersCustomerId
     *
     * @return self
     */
    public function setCustomersCustomerId($customersCustomerId)
    {
        if (is_null($customersCustomerId)) {
            throw new \InvalidArgumentException('non-nullable customersCustomerId cannot be null');
        }
        $this->container['customersCustomerId'] = $customersCustomerId;

        return $this;
    }

    /**
     * Gets carrierId
     *
     * @return int|null
     */
    public function getCarrierId()
    {
        return $this->container['carrierId'];
    }

    /**
     * Sets carrierId
     *
     * @param int|null $carrierId carrierId
     *
     * @return self
     */
    public function setCarrierId($carrierId)
    {
        if (is_null($carrierId)) {
            throw new \InvalidArgumentException('non-nullable carrierId cannot be null');
        }
        $this->container['carrierId'] = $carrierId;

        return $this;
    }

    /**
     * Gets orderNo
     *
     * @return string|null
     */
    public function getOrderNo()
    {
        return $this->container['orderNo'];
    }

    /**
     * Sets orderNo
     *
     * @param string|null $orderNo orderNo
     *
     * @return self
     */
    public function setOrderNo($orderNo)
    {
        if (is_null($orderNo)) {
            throw new \InvalidArgumentException('non-nullable orderNo cannot be null');
        }
        $this->container['orderNo'] = $orderNo;

        return $this;
    }

    /**
     * Gets currentStatusId
     *
     * @return int|null
     */
    public function getCurrentStatusId()
    {
        return $this->container['currentStatusId'];
    }

    /**
     * Sets currentStatusId
     *
     * @param int|null $currentStatusId currentStatusId
     *
     * @return self
     */
    public function setCurrentStatusId($currentStatusId)
    {
        if (is_null($currentStatusId)) {
            throw new \InvalidArgumentException('non-nullable currentStatusId cannot be null');
        }
        $this->container['currentStatusId'] = $currentStatusId;

        return $this;
    }

    /**
     * Gets isPDFDelivered
     *
     * @return bool|null
     */
    public function getIsPDFDelivered()
    {
        return $this->container['isPDFDelivered'];
    }

    /**
     * Sets isPDFDelivered
     *
     * @param bool|null $isPDFDelivered isPDFDelivered
     *
     * @return self
     */
    public function setIsPDFDelivered($isPDFDelivered)
    {
        if (is_null($isPDFDelivered)) {
            throw new \InvalidArgumentException('non-nullable isPDFDelivered cannot be null');
        }
        $this->container['isPDFDelivered'] = $isPDFDelivered;

        return $this;
    }

    /**
     * Gets paymentMethod
     *
     * @return string|null
     */
    public function getPaymentMethod()
    {
        return $this->container['paymentMethod'];
    }

    /**
     * Sets paymentMethod
     *
     * @param string|null $paymentMethod paymentMethod
     *
     * @return self
     */
    public function setPaymentMethod($paymentMethod)
    {
        if (is_null($paymentMethod)) {
            array_push($this->openAPINullablesSetToNull, 'paymentMethod');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paymentMethod', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paymentMethod'] = $paymentMethod;

        return $this;
    }

    /**
     * Gets totalShippingCosts
     *
     * @return float|null
     */
    public function getTotalShippingCosts()
    {
        return $this->container['totalShippingCosts'];
    }

    /**
     * Sets totalShippingCosts
     *
     * @param float|null $totalShippingCosts totalShippingCosts
     *
     * @return self
     */
    public function setTotalShippingCosts($totalShippingCosts)
    {
        if (is_null($totalShippingCosts)) {
            array_push($this->openAPINullablesSetToNull, 'totalShippingCosts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('totalShippingCosts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['totalShippingCosts'] = $totalShippingCosts;

        return $this;
    }

    /**
     * Gets totalPaid
     *
     * @return float|null
     */
    public function getTotalPaid()
    {
        return $this->container['totalPaid'];
    }

    /**
     * Sets totalPaid
     *
     * @param float|null $totalPaid totalPaid
     *
     * @return self
     */
    public function setTotalPaid($totalPaid)
    {
        if (is_null($totalPaid)) {
            array_push($this->openAPINullablesSetToNull, 'totalPaid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('totalPaid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['totalPaid'] = $totalPaid;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            array_push($this->openAPINullablesSetToNull, 'comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('comment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets deliveryNote
     *
     * @return string|null
     */
    public function getDeliveryNote()
    {
        return $this->container['deliveryNote'];
    }

    /**
     * Sets deliveryNote
     *
     * @param string|null $deliveryNote deliveryNote
     *
     * @return self
     */
    public function setDeliveryNote($deliveryNote)
    {
        if (is_null($deliveryNote)) {
            array_push($this->openAPINullablesSetToNull, 'deliveryNote');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deliveryNote', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deliveryNote'] = $deliveryNote;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference reference
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            array_push($this->openAPINullablesSetToNull, 'reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets discountName
     *
     * @return string|null
     */
    public function getDiscountName()
    {
        return $this->container['discountName'];
    }

    /**
     * Sets discountName
     *
     * @param string|null $discountName discountName
     *
     * @return self
     */
    public function setDiscountName($discountName)
    {
        if (is_null($discountName)) {
            array_push($this->openAPINullablesSetToNull, 'discountName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discountName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['discountName'] = $discountName;

        return $this;
    }

    /**
     * Gets discountCode
     *
     * @return string|null
     */
    public function getDiscountCode()
    {
        return $this->container['discountCode'];
    }

    /**
     * Sets discountCode
     *
     * @param string|null $discountCode discountCode
     *
     * @return self
     */
    public function setDiscountCode($discountCode)
    {
        if (is_null($discountCode)) {
            array_push($this->openAPINullablesSetToNull, 'discountCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discountCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['discountCode'] = $discountCode;

        return $this;
    }

    /**
     * Gets discountValue
     *
     * @return float|null
     */
    public function getDiscountValue()
    {
        return $this->container['discountValue'];
    }

    /**
     * Sets discountValue
     *
     * @param float|null $discountValue discountValue
     *
     * @return self
     */
    public function setDiscountValue($discountValue)
    {
        if (is_null($discountValue)) {
            array_push($this->openAPINullablesSetToNull, 'discountValue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discountValue', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['discountValue'] = $discountValue;

        return $this;
    }

    /**
     * Gets sentToDatahub
     *
     * @return \DateTime|null
     */
    public function getSentToDatahub()
    {
        return $this->container['sentToDatahub'];
    }

    /**
     * Sets sentToDatahub
     *
     * @param \DateTime|null $sentToDatahub sentToDatahub
     *
     * @return self
     */
    public function setSentToDatahub($sentToDatahub)
    {
        if (is_null($sentToDatahub)) {
            array_push($this->openAPINullablesSetToNull, 'sentToDatahub');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sentToDatahub', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sentToDatahub'] = $sentToDatahub;

        return $this;
    }

    /**
     * Gets positions
     *
     * @return \RtgConnector\RtgConnectBundle\Model\OrderDetailPosition[]|null
     */
    public function getPositions()
    {
        return $this->container['positions'];
    }

    /**
     * Sets positions
     *
     * @param \RtgConnector\RtgConnectBundle\Model\OrderDetailPosition[]|null $positions positions
     *
     * @return self
     */
    public function setPositions($positions)
    {
        if (is_null($positions)) {
            throw new \InvalidArgumentException('non-nullable positions cannot be null');
        }
        $this->container['positions'] = $positions;

        return $this;
    }

    /**
     * Gets invoice
     *
     * @return \RtgConnector\RtgConnectBundle\Model\OrderDetailInvoice|null
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param \RtgConnector\RtgConnectBundle\Model\OrderDetailInvoice|null $invoice invoice
     *
     * @return self
     */
    public function setInvoice($invoice)
    {
        if (is_null($invoice)) {
            throw new \InvalidArgumentException('non-nullable invoice cannot be null');
        }
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets invoiceAddress
     *
     * @return \RtgConnector\RtgConnectBundle\Model\OrderDetailInvoiceAddress|null
     */
    public function getInvoiceAddress()
    {
        return $this->container['invoiceAddress'];
    }

    /**
     * Sets invoiceAddress
     *
     * @param \RtgConnector\RtgConnectBundle\Model\OrderDetailInvoiceAddress|null $invoiceAddress invoiceAddress
     *
     * @return self
     */
    public function setInvoiceAddress($invoiceAddress)
    {
        if (is_null($invoiceAddress)) {
            throw new \InvalidArgumentException('non-nullable invoiceAddress cannot be null');
        }
        $this->container['invoiceAddress'] = $invoiceAddress;

        return $this;
    }

    /**
     * Gets deliveryAddress
     *
     * @return \RtgConnector\RtgConnectBundle\Model\OrderDetailDeliveryAddress|null
     */
    public function getDeliveryAddress()
    {
        return $this->container['deliveryAddress'];
    }

    /**
     * Sets deliveryAddress
     *
     * @param \RtgConnector\RtgConnectBundle\Model\OrderDetailDeliveryAddress|null $deliveryAddress deliveryAddress
     *
     * @return self
     */
    public function setDeliveryAddress($deliveryAddress)
    {
        if (is_null($deliveryAddress)) {
            throw new \InvalidArgumentException('non-nullable deliveryAddress cannot be null');
        }
        $this->container['deliveryAddress'] = $deliveryAddress;

        return $this;
    }

    /**
     * Gets statusHistories
     *
     * @return \RtgConnector\RtgConnectBundle\Model\OrderDetailStatusHistoryEntry[]|null
     */
    public function getStatusHistories()
    {
        return $this->container['statusHistories'];
    }

    /**
     * Sets statusHistories
     *
     * @param \RtgConnector\RtgConnectBundle\Model\OrderDetailStatusHistoryEntry[]|null $statusHistories statusHistories
     *
     * @return self
     */
    public function setStatusHistories($statusHistories)
    {
        if (is_null($statusHistories)) {
            throw new \InvalidArgumentException('non-nullable statusHistories cannot be null');
        }
        $this->container['statusHistories'] = $statusHistories;

        return $this;
    }

    /**
     * Gets orderId
     *
     * @return int|null
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId
     *
     * @param int|null $orderId orderId
     *
     * @return self
     */
    public function setOrderId($orderId)
    {
        if (is_null($orderId)) {
            throw new \InvalidArgumentException('non-nullable orderId cannot be null');
        }
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets orderStatuscodeId
     *
     * @return int|null
     */
    public function getOrderStatuscodeId()
    {
        return $this->container['orderStatuscodeId'];
    }

    /**
     * Sets orderStatuscodeId
     *
     * @param int|null $orderStatuscodeId orderStatuscodeId
     *
     * @return self
     */
    public function setOrderStatuscodeId($orderStatuscodeId)
    {
        if (is_null($orderStatuscodeId)) {
            throw new \InvalidArgumentException('non-nullable orderStatuscodeId cannot be null');
        }
        $this->container['orderStatuscodeId'] = $orderStatuscodeId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


