<?php
/**
 * OrderDetailInvoiceSchema
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RtgConnector\RtgConnectBundle
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * RTG-Portal
 *
 * The RTG-Portal API is an interface for selected RTG-Shop customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: fabian.kaufmann@picard.de
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RtgConnector\RtgConnectBundle\Model;

use \ArrayAccess;
use \RtgConnector\RtgConnectBundle\ObjectSerializer;

/**
 * OrderDetailInvoiceSchema Class Doc Comment
 *
 * @category Class
 * @package  RtgConnector\RtgConnectBundle
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderDetailInvoiceSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = 'type';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderDetailInvoiceSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'invoiceNo' => 'string',
        'invoiceDate' => '\DateTime',
        'deliveryDate' => '\DateTime',
        'currency' => 'string',
        'language' => 'string',
        'vatNo' => 'string',
        'isPDFDelivered' => 'bool',
        'isPaid' => 'bool',
        'paymentMethod' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'invoiceNo' => null,
        'invoiceDate' => 'date-time',
        'deliveryDate' => 'date-time',
        'currency' => null,
        'language' => null,
        'vatNo' => null,
        'isPDFDelivered' => null,
        'isPaid' => null,
        'paymentMethod' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'invoiceNo' => true,
		'invoiceDate' => true,
		'deliveryDate' => true,
		'currency' => true,
		'language' => true,
		'vatNo' => true,
		'isPDFDelivered' => true,
		'isPaid' => false,
		'paymentMethod' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'invoiceNo' => 'invoice_no',
        'invoiceDate' => 'invoiceDate',
        'deliveryDate' => 'deliveryDate',
        'currency' => 'currency',
        'language' => 'language',
        'vatNo' => 'vatNo',
        'isPDFDelivered' => 'isPDFDelivered',
        'isPaid' => 'isPaid',
        'paymentMethod' => 'paymentMethod'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'invoiceNo' => 'setInvoiceNo',
        'invoiceDate' => 'setInvoiceDate',
        'deliveryDate' => 'setDeliveryDate',
        'currency' => 'setCurrency',
        'language' => 'setLanguage',
        'vatNo' => 'setVatNo',
        'isPDFDelivered' => 'setIsPDFDelivered',
        'isPaid' => 'setIsPaid',
        'paymentMethod' => 'setPaymentMethod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'invoiceNo' => 'getInvoiceNo',
        'invoiceDate' => 'getInvoiceDate',
        'deliveryDate' => 'getDeliveryDate',
        'currency' => 'getCurrency',
        'language' => 'getLanguage',
        'vatNo' => 'getVatNo',
        'isPDFDelivered' => 'getIsPDFDelivered',
        'isPaid' => 'getIsPaid',
        'paymentMethod' => 'getPaymentMethod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('invoiceNo', $data ?? [], null);
        $this->setIfExists('invoiceDate', $data ?? [], null);
        $this->setIfExists('deliveryDate', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('vatNo', $data ?? [], null);
        $this->setIfExists('isPDFDelivered', $data ?? [], null);
        $this->setIfExists('isPaid', $data ?? [], null);
        $this->setIfExists('paymentMethod', $data ?? [], null);

        // Initialize discriminator property with the model name.
        $this->container['type'] = static::$openAPIModelName;
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['currency']) && !preg_match("/^[A-Z]{3}$/", $this->container['currency'])) {
            $invalidProperties[] = "invalid value for 'currency', must be conform to the pattern /^[A-Z]{3}$/.";
        }

        if (!is_null($this->container['language']) && !preg_match("/^[A-Z]{2}$/", $this->container['language'])) {
            $invalidProperties[] = "invalid value for 'language', must be conform to the pattern /^[A-Z]{2}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets invoiceNo
     *
     * @return string|null
     */
    public function getInvoiceNo()
    {
        return $this->container['invoiceNo'];
    }

    /**
     * Sets invoiceNo
     *
     * @param string|null $invoiceNo invoiceNo
     *
     * @return self
     */
    public function setInvoiceNo($invoiceNo)
    {
        if (is_null($invoiceNo)) {
            array_push($this->openAPINullablesSetToNull, 'invoiceNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoiceNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoiceNo'] = $invoiceNo;

        return $this;
    }

    /**
     * Gets invoiceDate
     *
     * @return \DateTime|null
     */
    public function getInvoiceDate()
    {
        return $this->container['invoiceDate'];
    }

    /**
     * Sets invoiceDate
     *
     * @param \DateTime|null $invoiceDate invoiceDate
     *
     * @return self
     */
    public function setInvoiceDate($invoiceDate)
    {
        if (is_null($invoiceDate)) {
            array_push($this->openAPINullablesSetToNull, 'invoiceDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoiceDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoiceDate'] = $invoiceDate;

        return $this;
    }

    /**
     * Gets deliveryDate
     *
     * @return \DateTime|null
     */
    public function getDeliveryDate()
    {
        return $this->container['deliveryDate'];
    }

    /**
     * Sets deliveryDate
     *
     * @param \DateTime|null $deliveryDate deliveryDate
     *
     * @return self
     */
    public function setDeliveryDate($deliveryDate)
    {
        if (is_null($deliveryDate)) {
            array_push($this->openAPINullablesSetToNull, 'deliveryDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deliveryDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deliveryDate'] = $deliveryDate;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            array_push($this->openAPINullablesSetToNull, 'currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($currency) && (!preg_match("/^[A-Z]{3}$/", $currency))) {
            throw new \InvalidArgumentException("invalid value for \$currency when calling OrderDetailInvoiceSchema., must conform to the pattern /^[A-Z]{3}$/.");
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            array_push($this->openAPINullablesSetToNull, 'language');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('language', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($language) && (!preg_match("/^[A-Z]{2}$/", $language))) {
            throw new \InvalidArgumentException("invalid value for \$language when calling OrderDetailInvoiceSchema., must conform to the pattern /^[A-Z]{2}$/.");
        }

        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets vatNo
     *
     * @return string|null
     */
    public function getVatNo()
    {
        return $this->container['vatNo'];
    }

    /**
     * Sets vatNo
     *
     * @param string|null $vatNo vatNo
     *
     * @return self
     */
    public function setVatNo($vatNo)
    {
        if (is_null($vatNo)) {
            array_push($this->openAPINullablesSetToNull, 'vatNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vatNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vatNo'] = $vatNo;

        return $this;
    }

    /**
     * Gets isPDFDelivered
     *
     * @return bool|null
     */
    public function getIsPDFDelivered()
    {
        return $this->container['isPDFDelivered'];
    }

    /**
     * Sets isPDFDelivered
     *
     * @param bool|null $isPDFDelivered isPDFDelivered
     *
     * @return self
     */
    public function setIsPDFDelivered($isPDFDelivered)
    {
        if (is_null($isPDFDelivered)) {
            array_push($this->openAPINullablesSetToNull, 'isPDFDelivered');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isPDFDelivered', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['isPDFDelivered'] = $isPDFDelivered;

        return $this;
    }

    /**
     * Gets isPaid
     *
     * @return bool|null
     */
    public function getIsPaid()
    {
        return $this->container['isPaid'];
    }

    /**
     * Sets isPaid
     *
     * @param bool|null $isPaid isPaid
     *
     * @return self
     */
    public function setIsPaid($isPaid)
    {
        if (is_null($isPaid)) {
            throw new \InvalidArgumentException('non-nullable isPaid cannot be null');
        }
        $this->container['isPaid'] = $isPaid;

        return $this;
    }

    /**
     * Gets paymentMethod
     *
     * @return string|null
     */
    public function getPaymentMethod()
    {
        return $this->container['paymentMethod'];
    }

    /**
     * Sets paymentMethod
     *
     * @param string|null $paymentMethod paymentMethod
     *
     * @return self
     */
    public function setPaymentMethod($paymentMethod)
    {
        if (is_null($paymentMethod)) {
            array_push($this->openAPINullablesSetToNull, 'paymentMethod');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paymentMethod', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paymentMethod'] = $paymentMethod;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


